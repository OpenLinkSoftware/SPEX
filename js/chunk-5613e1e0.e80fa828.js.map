{"version":3,"sources":["webpack:///./node_modules/@graphy/core.iso.stream/main.js","webpack:///./node_modules/@graphy/core.class.scribable/main.js","webpack:///./node_modules/@graphy/core.class.writable/main.js","webpack:///./node_modules/@graphy/content.trig.write/main.js"],"names":["Readable","stream","gc_readable","super","iterator","Error","s_event","b_return_stream","Promise","fk_until","fe_until","this","on","e_stream","once","a_args","s_encoding","g_readable","_readableState","objectMode","fk_bucket","fe_bucket","a_data","pipe","Writable","w_event","s_write_encoding","fk_write","push","a_chunks","fk_writev","s_data","setEncoding","decodeStrings","s_chunk","join","ab_data","Buffer","from","ab_chunk","concat","length","ds_source","w_chunk","write","end","e_read","emit","Duplex","Transform","e_destroy","z_chunk","Object","getPrototypeOf","apply","prototype","destroy","call","b_is_node","Function","B_BROWSER","B_BROWSERIFY","process","browser","versions","node","exec","version","fke_destroy","destroyed","_writableState","f_emit_close","emitClose","_destroy","e_destroy_re","nextTick","errorEmitted","QuadsToOther","gc_transform","writableObjectMode","readableObjectMode","_as_inputs","Set","ds_src","add","delete","ds_input","Quads_To_JSON_Transform","g_quad","fk_transform","JSON","stringify","isolate","Quads_To_Writable","type","value","module","exports","w_push","isBuffer","queueMicrotask","dp_resolve","resolve","fk","then","catch","e_callback","setTimeout","e_define","factory","N_DEFAULT_MAX_BUFFER","Scribable","k_self","_s_push","gc_scribable","prefixes","h_prefixes","_n_max_buffer","max_buffer","maxBuffer","_h_prefixes","cache_prefixes","s_prefix_id","p_iri","s_comment","close","drain","error","finish","data","warning","replace","n_newlines","repeat","hc4r_quads","a_unions","s_write","sc1_graph","_serialize_c3r","s_warning","map","sc1","c1","verbose","console","warn","constructor","name","h_prefixes_in","b_terse","cachePrefixes","g_event","fke_transform","w_write","serialize","e_serialize","_flush_buffer","nl_push","s_push","undefined","_serialize_quad","_serialize_c4r","g_sub","_serialize_c3","_serialize_c4","_serialize_prefixes","_serialize_comment","_serialize_newlines","_reset","assign","isGraphyWritable","_update_prefixes","R_DIRECTIVE_CONTENTS","HM_COERCIONS_DEFAULT","Map","Date","dt","dateTime","Number","x","number","gc_writable","lists","gc_lists","hm_coercions","coercions","dc_type","f_transform","set","g_lists","first","rest","nil","sc1_first","sc1_rest","sc1_nil","_xc_state","_hm_coercions","_g_lists","g_directive","width","n_width","a_lines","s_line","slice","m_line","a_list","z_item","w_first","Array","isArray","_transcode_list","sc1_directive","w_value","m_directive","parse","e_parse","s_type","a_list_serializers","_a_list_serializers","_serialize_list_object","g_list_default","n_nest_level","hc2_transcoded","_encode_objects","exit","pop","hc4_quads","sv1_graph","RT_PREFIXED_NAME_NAMESPACE_VALID","XC_DIRECTIVES_TYPE_SPARQL","XC_DIRECTIVES_CASE_PASCAL","XC_DIRECTIVES_CASE_UPPER","TriG_Writer","gc_writer","debug","b_debug","style","gc_style","_b_debug","_s_indent","_b_simplify_default_graph","_xc_directives","_s_token_prefix","s_graph_keyword","z_graph_keyword","graph_keyword","graphKeyword","TypeError","test","w_simplify_default_graph","simplify_default_graph","simplifyDefaultGraph","indent","z_directives","directives","_s_graph_keyword","s_token_prefix","s_prefix_eol","s_prefixes","namedNode","hc3_triples","s_indent","s_delim_triples","f_exit_subject","sc1_subject","g_apply","_apply_directive","i_triples","c1_node","terse","s_indent_pairs","s_term_pairs","hc2_pairs","i_pairs","b_empty","f_exit_predicate","sc1_predicate","z_objects","st_objects","kt_predicate","c1_named_node","st_predicate","isRdfTypeAlias","b_simplify_default_graph","f_exit_graph","st_graph","s_indent_root","boolean","s_term_object","f_exit_object","has","kt_converted","get","isGraphyTerm","termType","term","a_collection","s_objects","_serialize_collection_object","kq_quad","quad","graph","subject","predicate","object","anonymous_blank_nodes","_serialize_hash_comment"],"mappings":"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","file":"js/chunk-5613e1e0.e80fa828.js","sourcesContent":["const stream = require('readable-stream');\n\n\n\nclass Readable extends stream.Readable {\n\tconstructor(gc_readable={}) {\n\t\tsuper(gc_readable);\n\n\t\t// use iterator\n\t\tif(gc_readable.iterator) {\n\t\t\tthrow new Error('readable stream iterator shortcut not yet implemented');\n\t\t}\n\t}\n\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass Writable extends stream.Writable {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\t// rdfjs impl\n\timport(ds_source) {\n\t\tds_source\n\t\t\t.on('data', w_chunk => this.write(w_chunk))\n\t\t\t.on('end', () => this.end())\n\t\t\t.on('error', e_read => this.emit('error', e_read));\n\n\t\treturn this;\n\t}\n}\n\nclass Duplex extends stream.Duplex {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass Transform extends stream.Transform {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t// rdfjs impl\n\timport(ds_source) {\n\t\tds_source\n\t\t\t.on('data', w_chunk => this.write(w_chunk))\n\t\t\t.on('end', () => this.end())\n\t\t\t.on('error', e_read => this.emit('error', e_read));\n\n\t\treturn this;\n\t}\n\n\tdemolish(e_destroy) {\n\t\t// do not allow to push\n\t\tthis.push = (z_chunk) => {\n\t\t\t// ignore eof signals from node core\n\t\t\tif(null === z_chunk) return;\n\n\t\t\t// anything else is bad\n\t\t\tthrow new Error(`[ERR_STREAM_DESTROYED]: Cannot push after stream was destroyed`);\n\t\t};\n\n\t\t// do not allow to emit 'end'\n\t\tthis.emit = function(s_event, ...a_args) {\n\t\t\tif('end' === s_event) return;\n\n\t\t\tObject.getPrototypeOf(this).emit.apply(this, [s_event, ...a_args]);\n\t\t};\n\n\t\t// an error was given, destroy the stream as well\n\t\tif(e_destroy) {\n\t\t\treturn stream.Transform.prototype.destroy.call(this, e_destroy);\n\t\t}\n\t}\n}\n\n// eslint-disable-next-line no-new-func\nconst b_is_node = (new Function(/* syntax: js */ `try {return this===global;}catch(e){return false;}`))();\n\n// deduce the runtime environment\nconst [B_BROWSER, B_BROWSERIFY] = (() => 'undefined' === typeof process\n\t? [true, false]\n\t: (process.browser\n\t\t? [true, true]\n\t\t: ('undefined' === process.versions || 'undefined' === process.versions.node\n\t\t\t? [true, false]\n\t\t\t: [false, false])))();\n\n// node.js or browserify; patch for node < v10\nif(B_BROWSERIFY || (b_is_node && (+(/^v(\\d+)/.exec(process.version)[1])) < 10)) {\n\t// override destroy methods\n\tTransform.prototype.destroy = Duplex.prototype.destroy = function(e_destroy, fke_destroy) {\n\t\tthis._readableState.destroyed = true;\n\t\tthis._writableState.destroyed = true;\n\n\t\tlet f_emit_close = () => {\n\t\t\tif(!this._writableState.emitClose) return;\n\t\t\tif(!this._readableState.emitClose) return;\n\t\t\tthis.emit('close');\n\t\t};\n\n\t\tthis._destroy(e_destroy || null, (e_destroy_re) => {\n\t\t\tif(!fke_destroy && e_destroy_re) {\n\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\tthis.emit('error', e_destroy_re);\n\t\t\t\t\tf_emit_close();\n\t\t\t\t});\n\t\t\t\tthis._writableState.errorEmitted = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocess.nextTick(f_emit_close);\n\t\t\t\tif(fke_destroy) fke_destroy(e_destroy_re);\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t};\n\n\t// override default _destroy implementations\n\tTransform.prototype._destroy = Duplex.prototype._destroy = (e_destroy, fke_destroy) => fke_destroy(e_destroy);\n}\n\nclass QuadsToOther extends Transform {\n\tconstructor(gc_transform={}) {\n\t\tsuper({\n\t\t\t...gc_transform,\n\t\t\twritableObjectMode: true,\n\t\t\treadableObjectMode: true,\n\t\t});\n\n\t\tthis._as_inputs = new Set();\n\n\t\t// forward prefix and comment events\n\t\tthis.on('pipe', (ds_src) => {\n\t\t\tthis._as_inputs.add(ds_src);\n\n\t\t\tds_src\n\t\t\t\t.on('prefix', (...a_args) => {\n\t\t\t\t\tthis.emit('prefix', ...a_args);\n\t\t\t\t})\n\t\t\t\t.on('comment', (...a_args) => {\n\t\t\t\t\tthis.emit('comment', ...a_args);\n\t\t\t\t});\n\t\t});\n\n\t\tthis.on('unpipe', (ds_src) => {\n\t\t\tthis._as_inputs.delete(ds_src);\n\t\t});\n\t}\n\n\t_destroy() {\n\t\tfor(let ds_input of this._as_inputs) {\n\t\t\tds_input.destroy();\n\t\t}\n\t}\n}\n\nclass Quads_To_JSON_Transform extends QuadsToOther {\n\t// serializse json\n\t_transform(g_quad, s_encoding, fk_transform) {\n\t\tfk_transform(null, JSON.stringify(g_quad.isolate())+'\\n');\n\t}\n}\n\nclass Quads_To_Writable extends QuadsToOther {\n\t_transform(g_quad, s_encoding, fk_transform) {\n\t\tfk_transform(null, {\n\t\t\ttype: 'quad',\n\t\t\tvalue: g_quad,\n\t\t});\n\t}\n}\n\nTransform.QuadsToOther = QuadsToOther;\n\nmodule.exports = {\n\t...stream,\n\tReadable,\n\tWritable,\n\tDuplex,\n\tTransform,\n\n\tQuadsToOther,\n\n\t// create a transform from quad objects into JSON strings for trivial serialization\n\tquads_to_json() {\n\t\treturn new Quads_To_JSON_Transform();\n\t},\n\n\t// create a transform from quad objects into writable data events\n\tquads_to_writable() {\n\t\treturn new Quads_To_Writable();\n\t},\n\n\t// create a simple, single-event readable stream\n\tsource(w_push, s_encoding=null) {\n\t\t// encoding not explicit, string given; assume utf8\n\t\tif(!s_encoding && 'string' === typeof w_push) s_encoding = 'utf8';\n\n\t\t// readable\n\t\treturn new Readable({\n\t\t\tobjectMode: !s_encoding && 'string' !== typeof w_push && !Buffer.isBuffer(w_push),\n\n\t\t\tread() {\n\t\t\t\tthis.push(w_push, s_encoding);\n\t\t\t\tthis.push(null);\n\t\t\t},\n\t\t});\n\t},\n};\n","\n\n\n// queueMicrotask shim\n{\n\t// not defined or not a function\n\tif('function' !== typeof queueMicrotask) {\n\t\t// create resolved promise\n\t\tlet dp_resolve = Promise.resolve();\n\n\t\t// try to redefine\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tqueueMicrotask = fk => dp_resolve.then(fk)\n\t\t\t\t.catch(e_callback => setTimeout(() => {\n\t\t\t\t\tthrow e_callback;\n\t\t\t\t}, 0));\n\t\t}\n\t\t// oh well, at least we tried\n\t\tcatch(e_define) {}\n\t}\n}\n\n\nconst factory = require('@graphy/core.data.factory');\nconst stream = require('@graphy/core.iso.stream');\n\n\n// max string buffer size\nconst N_DEFAULT_MAX_BUFFER = 1 << 15;  // 32 KiB\n\n\nclass Scribable extends stream.Transform {\n\t// flush buffer\n\tstatic _flush_buffer(k_self) {\n\t\t// no buffer; exit\n\t\tif(!k_self._s_push) return;\n\n\t\t// push buffer to stream\n\t\tk_self.push(k_self._s_push);\n\n\t\t// reset buffer\n\t\tk_self._s_push = '';\n\t}\n\n\tconstructor(gc_scribable={}) {\n\t\tsuper({\n\t\t\twritableObjectMode: true,\n\t\t\treadableObjectMode: false,\n\t\t});\n\n\t\tlet {\n\t\t\tprefixes: h_prefixes={},\n\t\t} = gc_scribable;\n\n\t\t// internal buffer\n\t\tthis._s_push = '';\n\n\t\t// max buffer length\n\t\tthis._n_max_buffer = gc_scribable.max_buffer || gc_scribable.maxBuffer || N_DEFAULT_MAX_BUFFER;\n\n\t\t// prefixes\n\t\tthis._h_prefixes = factory.cache_prefixes(h_prefixes || {});\n\n\t\t// on new source(s)\n\t\tthis.on('pipe', (ds_src) => {\n\t\t\t// listen for prefix events\n\t\t\tds_src.on('prefix', (s_prefix_id, p_iri) => {\n\t\t\t\tthis.write({\n\t\t\t\t\ttype: 'prefixes',\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\t[s_prefix_id]: p_iri,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// listen for comment events\n\t\t\tds_src.on('comment', (s_comment) => {\n\t\t\t\tthis.write({\n\t\t\t\t\ttype: 'comment',\n\t\t\t\t\tvalue: s_comment,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// bind event listeners\n\t\tif(gc_scribable.close) this.once('close', gc_scribable.close);\n\t\tif(gc_scribable.drain) this.on('drain', gc_scribable.drain);\n\t\tif(gc_scribable.error) this.on('error', gc_scribable.error);\n\t\tif(gc_scribable.finish) this.once('finish', gc_scribable.finish);\n\t\tif(gc_scribable.data) this.on('data', gc_scribable.data);\n\t\tif(gc_scribable.end) this.once('end', gc_scribable.end);\n\t\tif(gc_scribable.warning) this.on('warning', gc_scribable.warning);\n\t}\n\n\t_serialize_hash_comment(s_comment) {\n\t\treturn '# '+s_comment.replace(/\\n/g, '\\n# ')+'\\n';\n\t}\n\n\t_serialize_newlines(n_newlines=1) {\n\t\treturn '\\n'.repeat(n_newlines);\n\t}\n\n\t_serialize_c4r(hc4r_quads) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet a_unions = [];\n\t\tlet s_write = '';\n\n\t\t// each graph in quads hash\n\t\tfor(let sc1_graph in hc4r_quads) {\n\t\t\t// non-default graph; union from dataset\n\t\t\tif('*' !== sc1_graph) a_unions.push(sc1_graph);\n\n\t\t\t// add all quads from graph\n\t\t\ts_write += this._serialize_c3r(hc4r_quads[sc1_graph]);\n\t\t}\n\n\t\t// a union was performed\n\t\tif(a_unions.length) {\n\t\t\t// warn about implicit union\n\t\t\tlet s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => factory.c1(sc1, h_prefixes).verbose()).join(', ')}`;\n\n\t\t\t// emit warning, wasn't listened to; force thru warn/stderr channel\n\t\t\tif(!this.emit('warning', s_warning)) {\n\t\t\t\tconsole.warn(s_warning);\n\t\t\t}\n\t\t}\n\n\t\treturn s_write;\n\t}\n\n\n\t_serialize_c3() {\n\t\tthrow new Error(`Write event type 'c3' not supported by ${this.constructor.name}`);\n\t}\n\n\t_serialize_c4() {\n\t\tthrow new Error(`Write event type 'c4' not supported by ${this.constructor.name}`);\n\t}\n\n\n\n\t_serialize_c3r() {\n\t\tthrow new Error(`Write event type 'c3r' should have been implemented by subclass ${this.constructor.name}`);\n\t}\n\n\t_serialize_quad() {\n\t\tthrow new Error(`Write event type 'quad' should have been implemented by subclass ${this.constructor.name}`);\n\t}\n\n\n\t// ignorable events\n\t_serialize_comment() {}  // eslint-disable-line class-methods-use-this\n\n\t// update prefix mappings\n\t_update_prefixes(h_prefixes_in, b_terse=false) {\n\t\t// merge prefixes\n\t\tlet h_prefixes = {\n\t\t\t...this._h_prefixes,\n\t\t\t...h_prefixes_in,\n\t\t};\n\n\t\t// recache prefixes\n\t\tthis._h_prefixes = factory.cachePrefixes(h_prefixes || {}, b_terse);\n\t}\n\n\t// implement stream.Transform\n\t_transform(g_event, s_encoding, fke_transform) {\n\t\tlet w_write;\n\n\t\t// try to serialize input value\n\t\ttry {\n\t\t\tw_write = this.serialize(g_event);\n\t\t}\n\t\t// serialization error\n\t\tcatch(e_serialize) {\n\t\t\t// report error\n\t\t\tfke_transform(e_serialize);\n\n\t\t\t// bail on transform\n\t\t\treturn e_serialize;\n\t\t}\n\n\t\t// data to push\n\t\tif(w_write) {\n\t\t\t// flush internal buffer\n\t\t\tScribable._flush_buffer(this);\n\n\t\t\t// push data to stream\n\t\t\tthis.push(w_write);\n\t\t}\n\t\t// nothing returned from serialization\n\t\telse {\n\t\t\tlet nl_push = this._s_push.length;\n\n\t\t\t// internal buffer high water mark\n\t\t\tif(nl_push > this._n_max_buffer) {\n\t\t\t\tScribable._flush_buffer(this);\n\t\t\t}\n\t\t\t// allow buffer to build\n\t\t\telse if(nl_push) {\n\t\t\t\t// do not worry about clearing timeouts\n\t\t\t\tqueueMicrotask(() => Scribable._flush_buffer(this));\n\t\t\t}\n\t\t}\n\n\t\t// callback\n\t\tfke_transform();\n\t}\n\n\t// queue data to be pushed later\n\t_queue(s_push) {\n\t\tthis._s_push += s_push;\n\n\t\t// internal buffer high water mark\n\t\tif(this._s_push.length > this._n_max_buffer) {\n\t\t\tScribable._flush_buffer(this);\n\t\t}\n\t\telse {\n\t\t\t// do not worry about clearing timeouts\n\t\t\tqueueMicrotask(() => Scribable._flush_buffer(this));\n\t\t}\n\t}\n\n\t// route event object to serialization method\n\tserialize(g_event) {\n\t\tswitch(g_event.type) {\n\t\t\t// rdfjs quad\n\t\t\t// eslint-disable-next-line no-undefined\n\t\t\tcase undefined: return this._serialize_quad(g_event);\n\n\t\t\t// concise triple struct strict-mode\n\t\t\tcase 'c3r': return this._serialize_c3r(g_event.value);\n\n\t\t\t// concise quad struct strict-mode\n\t\t\tcase 'c4r': return this._serialize_c4r(g_event.value);\n\n\t\t\t// array of events\n\t\t\tcase 'array': {\n\t\t\t\t// string building\n\t\t\t\tlet s_write = '';\n\n\t\t\t\t// each subevent\n\t\t\t\tfor(let g_sub of g_event.value) {\n\t\t\t\t\t// build serialization string\n\t\t\t\t\tlet s_push = this.serialize(g_sub);\n\n\t\t\t\t\t// something to push\n\t\t\t\t\tif(s_push) {\n\t\t\t\t\t\ts_write += s_push;\n\t\t\t\t\t}\n\t\t\t\t\t// push was queued\n\t\t\t\t\telse if(this._s_push) {\n\t\t\t\t\t\t// concat to write\n\t\t\t\t\t\ts_write += this._s_push;\n\n\t\t\t\t\t\t// reset push\n\t\t\t\t\t\tthis._s_push = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// all done\n\t\t\t\treturn s_write;\n\t\t\t}\n\n\t\t\t// quad\n\t\t\tcase 'quad': return this._serialize_quad(g_event.value);\n\n\t\t\t// concise triple struct\n\t\t\tcase 'c3': return this._serialize_c3(g_event.value);\n\n\t\t\t// concise quad struct\n\t\t\tcase 'c4': return this._serialize_c4(g_event.value);\n\n\t\t\t// prefixes\n\t\t\tcase 'prefixes': {\n\t\t\t\treturn this._serialize_prefixes(g_event.value);\n\t\t\t}\n\n\t\t\t// comment\n\t\t\tcase 'comment': {\n\t\t\t\treturn this._serialize_comment(g_event.value);\n\t\t\t}\n\n\t\t\t// newline(s)\n\t\t\tcase 'newline':\n\t\t\tcase 'newlines': {\n\t\t\t\treturn this._serialize_newlines(g_event.value);\n\t\t\t}\n\n\t\t\t// no such event type\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`no such writable data event type for RDF stream: '${g_event.type}'`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// rinse off buffer to writable\n\trinse() {\n\t\tthis._reset();\n\t\tScribable._flush_buffer(this);\n\t}\n\n\t_flush() {\n\t\t// flush buffer\n\t\tScribable._flush_buffer(this);\n\n\t\t// eof\n\t\tthis.push(null);\n\t}\n}\n\nObject.assign(Scribable.prototype, {\n\tisGraphyWritable: true,\n\t_serialize_prefixes: Scribable.prototype._update_prefixes,\n});\n\nmodule.exports = Scribable;\n","\n\n\nconst factory = require('@graphy/core.data.factory');\nconst Scribable = require('@graphy/core.class.scribable');\n\nconst R_DIRECTIVE_CONTENTS = /^`\\[[^\\]]+\\](.*)$/;\n\nconst HM_COERCIONS_DEFAULT = new Map([\n\t[Date, dt => factory.dateTime(dt)],\n\t[Number, x => factory.number(x)],\n]);\n\nclass Writable extends Scribable {\n\tconstructor(gc_writable={}) {\n\t\tsuper(gc_writable);\n\n\t\tlet {\n\t\t\tlists: gc_lists=null,\n\t\t} = gc_writable;\n\n\t\t// start with default coercions map\n\t\tlet hm_coercions = HM_COERCIONS_DEFAULT;\n\n\t\t// user is overriding coercions\n\t\tif(gc_writable.coercions) {\n\t\t\t// copy default map\n\t\t\thm_coercions = new Map(hm_coercions);\n\n\t\t\t// add each entry from user-defined map\n\t\t\tfor(let [dc_type, f_transform] of gc_writable.coercions) {\n\t\t\t\thm_coercions.set(dc_type, f_transform);\n\t\t\t}\n\t\t}\n\n\t\t// lists\n\t\tlet g_lists = {\n\t\t\tfirst: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#first',\n\t\t\trest: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#rest',\n\t\t\tnil: '>http://www.w3.org/1999/02/22-rdf-syntax-ns#nil',\n\t\t};\n\n\t\t// custom transcoder\n\t\tif(gc_lists) {\n\t\t\tlet {\n\t\t\t\tfirst: sc1_first=null,\n\t\t\t\trest: sc1_rest=null,\n\t\t\t\tnil: sc1_nil=null,\n\t\t\t} = gc_lists;\n\n\t\t\tif(sc1_first) g_lists.first = sc1_first;\n\t\t\tif(sc1_rest) g_lists.rest = sc1_rest;\n\t\t\tif(sc1_nil) g_lists.nil = sc1_nil;\n\t\t}\n\n\t\tObject.assign(this, {\n\t\t\t_xc_state: 0,\n\t\t\t_hm_coercions: hm_coercions,\n\t\t\t_g_lists: g_lists,\n\t\t});\n\t}\n\n\t// serialize comment\n\t_serialize_comment(s_comment, g_directive) {\n\t\tlet s_write = '';\n\n\t\t// non-data state\n\t\tif(2 !== this._xc_state) {\n\t\t\t// break line\n\t\t\ts_write += '\\n';\n\n\t\t\t// update state\n\t\t\tthis._xc_state = 2;\n\t\t}\n\n\t\t// comment width\n\t\tif(g_directive && g_directive.width) {\n\t\t\tlet n_width = g_directive.width;\n\n\t\t\tlet a_lines = [];\n\n\t\t\twhile(s_comment.length > n_width) {\n\t\t\t\tlet s_line = s_comment.slice(0, n_width+1);\n\n\t\t\t\tlet m_line = /^(.*[^\\s])\\s+/.exec(s_line);\n\n\t\t\t\tif(m_line) {\n\t\t\t\t\tlet s_push = m_line[1];\n\t\t\t\t\ta_lines.push(s_push);\n\t\t\t\t\ts_comment = s_comment.slice(s_push.length).replace(/^\\s+/, '');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta_lines.push(s_comment.slice(0, n_width));\n\t\t\t\t\ts_comment = s_comment.slice(n_width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ts_comment = a_lines.join('\\n');\n\t\t}\n\n\t\treturn s_write+(super._serialize_comment(s_comment) || '');\n\t}\n\n\n\t// transcode list into concise-pairs hash\n\t_transcode_list(a_list, g_lists=this._g_lists) {\n\t\t// empty list\n\t\tif(!a_list.length) {\n\t\t\treturn g_lists.nil;\n\t\t}\n\t\t// non-empty list\n\t\telse {\n\t\t\tlet z_item = a_list[0];\n\t\t\tlet w_first = z_item;\n\n\t\t\t// item is nested list; transcode\n\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\tw_first = this._transcode_list(z_item, g_lists);  // eslint-disable-line no-invalid-this\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// first item\n\t\t\t\t[g_lists.first]: w_first,\n\n\t\t\t\t// rest of items\n\t\t\t\t[g_lists.rest]: 1 === a_list.length\n\t\t\t\t\t? g_lists.nil\n\t\t\t\t\t: this._transcode_list(a_list.slice(1), g_lists),  // eslint-disable-line no-invalid-this\n\t\t\t};\n\t\t}\n\t}\n\n\t// serialize a writable data event directive\n\t_apply_directive(sc1_directive, w_value) {\n\t\t// directive contents\n\t\tlet m_directive = R_DIRECTIVE_CONTENTS.exec(sc1_directive);\n\t\tif(!m_directive) {\n\t\t\tthrow new Error(`Invalid writable data event directive string: \"${sc1_directive}\"`);\n\t\t}\n\n\t\t// parse as JSON\n\t\tlet g_directive;\n\t\ttry {\n\t\t\tg_directive = JSON.parse(m_directive[1]);\n\t\t}\n\t\tcatch(e_parse) {\n\t\t\tthrow new Error(`Unable to parse JSON in writable data event directive: \"${m_directive[1]}\"`);\n\t\t}\n\n\t\t// directive type\n\t\tlet s_type = g_directive.type;\n\n\t\t// deduce directive type\n\t\tswitch(s_type) {\n\t\t\t// comment\n\t\t\tcase 'comment': {\n\t\t\t\t// serializer supports commenting; serialize comment\n\t\t\t\tif(this._serialize_comment) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twrite: this._serialize_comment(w_value+'', g_directive),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// newlines\n\t\t\tcase 'newlines': {\n\t\t\t\t// serializer supports newlines; serialize newlines\n\t\t\t\tif(this._serialize_newlines) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twrite: this._serialize_newlines(w_value),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// config\n\t\t\tcase 'config': {\n\t\t\t\tswitch(g_directive.value) {\n\t\t\t\t\t// list config\n\t\t\t\t\tcase 'lists': {\n\t\t\t\t\t\t// ref stack of list serializers\n\t\t\t\t\t\tlet a_list_serializers = this._a_list_serializers;\n\n\t\t\t\t\t\t// push current method to stack\n\t\t\t\t\t\ta_list_serializers.push(this._serialize_list_object);\n\n\t\t\t\t\t\t// inherit unspecified keys from parent\n\t\t\t\t\t\tlet g_list_default = this._g_lists;\n\n\t\t\t\t\t\t// build list config\n\t\t\t\t\t\tlet g_lists = {\n\t\t\t\t\t\t\tfirst: w_value.first || g_list_default.first,\n\t\t\t\t\t\t\trest: w_value.rest || g_list_default.rest,\n\t\t\t\t\t\t\tnil: w_value.nil || g_list_default.nil,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// redefine list object serialization\n\t\t\t\t\t\tthis._serialize_list_object = function(a_list, n_nest_level) {\n\t\t\t\t\t\t\t// transcode list object\n\t\t\t\t\t\t\tlet hc2_transcoded = this._transcode_list(a_list, g_lists);\n\n\t\t\t\t\t\t\t// serialize object\n\t\t\t\t\t\t\treturn this._encode_objects(hc2_transcoded, n_nest_level);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// return local directive instructions\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\texit: () => {\n\t\t\t\t\t\t\t\tthis._serialize_list_object = a_list_serializers.pop();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// no such key\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tthrow new Error(`No such config key '${g_directive.value}'`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// other\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`Invalid writable data event directive type: '${s_type}'`);\n\t\t\t}\n\t\t}\n\n\t\t// nothing\n\t\treturn {};\n\t}\n\n\t// if not overriden by subclass, serialize quads in default graph\n\t_serialize_c4(hc4_quads) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet a_unions = [];\n\t\tlet s_write = '';\n\n\t\t// each graph in quads hash\n\t\tfor(let sv1_graph in hc4_quads) {\n\t\t\t// non-default graph; union from dataset\n\t\t\tif('*' !== sv1_graph) a_unions.push(sv1_graph);\n\n\t\t\t// add all quads from graph\n\t\t\ts_write += this._serialize_c3(hc4_quads[sv1_graph]);\n\t\t}\n\n\t\t// a union was performed\n\t\tif(a_unions.length) {\n\t\t\t// warn about implicit union\n\t\t\tlet s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => factory.c1(sc1, h_prefixes).verbose()).join(', ')}`;\n\n\t\t\t// emit warning, wasn't listened to; force thru warn/stderr channel\n\t\t\tif(!this.emit('warning', s_warning)) {\n\t\t\t\tconsole.warn(s_warning);\n\t\t\t}\n\t\t}\n\n\t\treturn s_write;\n\t}\n}\n\nmodule.exports = Writable;\n","\n\n\n// queueMicrotask shim\n{\n\t// not defined or not a function\n\tif('function' !== typeof queueMicrotask) {\n\t\t// create resolved promise\n\t\tlet dp_resolve = Promise.resolve();\n\n\t\t// try to redefine\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tqueueMicrotask = fk => dp_resolve.then(fk)\n\t\t\t\t.catch(e_callback => setTimeout(() => {\n\t\t\t\t\tthrow e_callback;\n\t\t\t\t}, 0));\n\t\t}\n\t\t// oh well, at least we tried\n\t\tcatch(e_define) {}\n\t}\n}\n\n\n\nconst factory = require('@graphy/core.data.factory');\nconst Writable = require('@graphy/core.class.writable');\n\n// eslint-disable-next-line no-misleading-character-class\nconst RT_PREFIXED_NAME_NAMESPACE_VALID = /^([A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}]([A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_\\-0-9\\xb7\\u{0300}-\\u{036f}\\u{203f}-\\u{2040}.]*[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_\\-0-9\\xb7\\u{0300}-\\u{036f}\\u{203f}-\\u{2040}])?)?$/u;\nconst N_MAX_STRING_BUFFER = 1 << 12;\n\nconst XC_DIRECTIVES_TYPE_SPARQL = 0b001;\nconst XC_DIRECTIVES_CASE_PASCAL = 0b010;\nconst XC_DIRECTIVES_CASE_UPPER = 0b100;\n\n\n\nclass TriG_Writer extends Writable {\n\tconstructor(gc_writer={}) {\n\t\tsuper(gc_writer);\n\n\t\tlet {\n\t\t\tprefixes: h_prefixes={},\n\t\t\tlists: gc_lists=null,\n\t\t\tdebug: b_debug=false,\n\t\t\tstyle: gc_style=null,\n\t\t} = gc_writer;\n\n\t\tObject.assign(this, {\n\t\t\t_b_debug: b_debug,\n\t\t\t_s_indent: '\\t',\n\t\t\t_b_simplify_default_graph: false,\n\t\t\t_xc_directives: 0,\n\t\t\t_s_token_prefix: '@prefix',\n\t\t});\n\n\t\tlet s_graph_keyword = '';\n\n\t\t// style config\n\t\tif(gc_style) {\n\t\t\t// 'graph' keyword\n\t\t\tlet z_graph_keyword = gc_style.graph_keyword || gc_style.graphKeyword || gc_style['graph-keyword'];\n\t\t\tif(z_graph_keyword) {\n\t\t\t\t// boolean true\n\t\t\t\tif(true === z_graph_keyword) {\n\t\t\t\t\ts_graph_keyword = 'GRAPH ';\n\t\t\t\t}\n\t\t\t\t// invalid type\n\t\t\t\telse if('string' !== typeof z_graph_keyword) {\n\t\t\t\t\tthrow new TypeError(`Invalid argument type given for 'graph' token: ${z_graph_keyword}`);\n\t\t\t\t}\n\t\t\t\t// invalid token string\n\t\t\t\telse if(!/^graph$/i.test(z_graph_keyword)) {\n\t\t\t\t\tthrow new Error(`Graph token must equal case-insensitive \"GRAPH\"; found: \"${z_graph_keyword}\"`);\n\t\t\t\t}\n\t\t\t\t// valid graph token; append space\n\t\t\t\telse {\n\t\t\t\t\ts_graph_keyword = z_graph_keyword+' ';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// default graph simplification\n\t\t\tlet w_simplify_default_graph = gc_style.simplify_default_graph || gc_style.simplifyDefaultGraph || gc_style['simplify-default-graph'];\n\t\t\tif(w_simplify_default_graph) {\n\t\t\t\tthis._b_simplify_default_graph = !!w_simplify_default_graph;\n\t\t\t}\n\n\t\t\t// indent\n\t\t\tif(gc_style.indent) {\n\t\t\t\tthis._s_indent = gc_style.indent.replace(/[^\\s]/g, '');\n\t\t\t}\n\n\t\t\t// use sparql directives\n\t\t\tlet z_directives = gc_style.directives || gc_style.directives;\n\t\t\tif(z_directives) {\n\t\t\t\tswitch(z_directives) {\n\t\t\t\t\tcase 'sparql': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL;\n\t\t\t\t\t\tthis._s_token_prefix = 'prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'Sparql': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL | XC_DIRECTIVES_CASE_PASCAL;\n\t\t\t\t\t\tthis._s_token_prefix = 'Prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'SPARQL': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_TYPE_SPARQL | XC_DIRECTIVES_CASE_UPPER;\n\t\t\t\t\t\tthis._s_token_prefix = 'PREFIX';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'turtle': {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'Turtle': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_CASE_PASCAL;\n\t\t\t\t\t\tthis._s_token_prefix = '@Prefix';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'TURTLE': {\n\t\t\t\t\t\tthis._xc_directives = XC_DIRECTIVES_CASE_UPPER;\n\t\t\t\t\t\tthis._s_token_prefix = '@PREFIX';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tthrow new Error(`Value not understood for 'directives' option: ${z_directives}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// set graph token\n\t\tthis._s_graph_keyword = s_graph_keyword;\n\n\n\n\t\t// custom list keys\n\t\tif(gc_lists) {\n\t\t\t// serialize list object\n\t\t\tthis._serialize_list_object = function(a_list, n_nest_level) {\n\t\t\t\t// transcode list object\n\t\t\t\tlet hc2_transcoded = this._transcode_list(a_list);\n\n\t\t\t\t// serialize object\n\t\t\t\treturn this._encode_objects(hc2_transcoded, n_nest_level);\n\t\t\t};\n\t\t}\n\n\t\t// serialize initial prefix mappings\n\t\tlet s_token_prefix = this._s_token_prefix;\n\t\tlet s_prefix_eol = (this._xc_directives & XC_DIRECTIVES_TYPE_SPARQL)? '\\n': ' .\\n';\n\t\tlet s_prefixes = '';\n\t\ttry {\n\t\t\t// each user-defined prefix\n\t\t\tfor(let s_prefix_id in h_prefixes) {\n\t\t\t\t// invalid prefix id\n\t\t\t\tif(!RT_PREFIXED_NAME_NAMESPACE_VALID.test(s_prefix_id)) {\n\t\t\t\t\tthrow new Error(`Invlalid prefix id for application/trig RDF serialization format: '${s_prefix_id}'`);\n\t\t\t\t}\n\n\t\t\t\t// append to string\n\t\t\t\ts_prefixes += `${s_token_prefix} ${s_prefix_id}: ${factory.namedNode(h_prefixes[s_prefix_id]).verbose()}${s_prefix_eol}`;\n\t\t\t}\n\t\t}\n\t\t// serialization error\n\t\tcatch(e_serialize) {\n\t\t\tqueueMicrotask(() => {\n\t\t\t\tthis.emit('error', e_serialize);\n\t\t\t});\n\t\t}\n\n\t\t// push prefixes\n\t\tif(s_prefixes) this.push(s_prefixes);\n\t}\n\n\t// serialize prefixes\n\t_serialize_prefixes(h_prefixes) {\n\t\t// build prefixes string\n\t\tlet s_prefixes = (2 === this._xc_state)? '\\n\\n': '';\n\n\t\t// update state\n\t\tthis._xc_state = 0;\n\n\t\t// clone prefixes\n\t\tthis._h_prefixes = {...this._h_prefixes};\n\n\t\t// ref prefix token\n\t\tlet s_token_prefix = this._s_token_prefix;\n\n\t\t// prep eol string\n\t\tlet s_prefix_eol = (this._xc_directives & XC_DIRECTIVES_TYPE_SPARQL)? '\\n': ' .\\n';\n\n\t\t// each user-defined prefix\n\t\tfor(let s_prefix_id in h_prefixes) {\n\t\t\t// invalid prefix id\n\t\t\tif(!RT_PREFIXED_NAME_NAMESPACE_VALID.test(s_prefix_id)) {\n\t\t\t\tthrow new Error(`Invlalid prefix id for application/trig RDF serialization format: '${s_prefix_id}'`);\n\t\t\t}\n\n\t\t\t// append to string\n\t\t\ts_prefixes += `${s_token_prefix} ${s_prefix_id}: ${factory.namedNode(h_prefixes[s_prefix_id]).verbose()}${s_prefix_eol}`;\n\n\t\t\t// set prefix\n\t\t\tthis._h_prefixes[s_prefix_id] = h_prefixes[s_prefix_id];\n\t\t}\n\n\t\t// recache\n\t\tfactory.cache_prefixes(this._h_prefixes);\n\n\t\t// return prefix string\n\t\treturn s_prefixes;\n\t}\n\n\n\n\t// serialize c3 hash\n\t_serialize_c3(hc3_triples) {\n\t\tlet {\n\t\t\t_h_prefixes: h_prefixes,\n\t\t\t_s_indent: s_indent,\n\n\t\t} = this;\n\t\t// break line if non-data state\n\t\tlet s_write = 2 !== this._xc_state? '\\n': '';\n\t\t// update state\n\t\tthis._xc_state = 2;\n\n\t\t// triple delimiter\n\t\tlet s_delim_triples = '';\n\t\t// subject exit listener\n\t\tlet f_exit_subject = null;\n\t\t// each subject\n\t\tfor(let sc1_subject in hc3_triples) {\n\t\t\t// directive\n\t\t\tif('`' === sc1_subject[0]) {\n\t\t\t\tlet g_apply = this._apply_directive(sc1_subject, hc3_triples[sc1_subject]);\n\t\t\t\t// write data\n\t\t\t\tif(g_apply.write) {\n\t\t\t\t\ts_write += s_delim_triples+g_apply.write;\n\t\t\t\t\t// do not break next line\n\t\t\t\t\ts_delim_triples = '';\n\t\t\t\t}\n\t\t\t\t// save exit listener\n\t\t\t\tif(g_apply.exit) f_exit_subject = g_apply.exit;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// position before subject\n\t\t\tlet i_triples = s_write.length;\n\t\t\t// serialize subject\n\t\t\ts_write += s_delim_triples+factory.c1_node(sc1_subject, h_prefixes).terse(h_prefixes)+' ';\n\t\t\t// pair indent & terminator\n\t\t\tlet s_indent_pairs = '';\n\t\t\tlet s_term_pairs = '';\n\t\t\t// ref pairs\n\t\t\tlet hc2_pairs = hc3_triples[sc1_subject];\n\t\t\t// position before pairs\n\t\t\tlet i_pairs = s_write.length;\n\t\t\t// were objects written?\n\t\t\tlet b_empty = true;\n\t\t\t// predicate exit listener\n\t\t\tlet f_exit_predicate = null;\n\t\t\t// each predicate\n\t\t\tfor(let sc1_predicate in hc2_pairs) {\n\t\t\t\t// directive\n\t\t\t\tif('`' === sc1_predicate[0]) {\n\t\t\t\t\t// apply directive\n\t\t\t\t\tlet g_apply = this._apply_directive(sc1_predicate, hc2_pairs[sc1_predicate]);\n\t\t\t\t\t// write data\n\t\t\t\t\tif(g_apply.write) {\n\t\t\t\t\t\t// break line\n\t\t\t\t\t\ts_write += (s_indent_pairs? s_term_pairs: '\\n')+s_indent+g_apply.write;\n\t\t\t\t\t\t// pair already terminated\n\t\t\t\t\t\ts_term_pairs = '';\n\t\t\t\t\t\t// indent next pair\n\t\t\t\t\t\ts_indent_pairs = s_indent;\n\t\t\t\t\t}\n\t\t\t\t\t// save exit listener\n\t\t\t\t\tif(g_apply.exit) f_exit_predicate = g_apply.exit;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// ref objects\n\t\t\t\tlet z_objects = hc2_pairs[sc1_predicate];\n\t\t\t\t// serialize objects\n\t\t\t\tlet st_objects = this._encode_objects(z_objects);\n\t\t\t\t// no objects; skip pair\n\t\t\t\tif(!st_objects) continue;\n\t\t\t\t// not empty\n\t\t\t\tb_empty = false;\n\t\t\t\t// cannot use blank node in predicate position\n\t\t\t\tif('_' === sc1_predicate[0] && ':' === sc1_predicate[1]) {\n\t\t\t\t\tthrow new Error(`Cannot use blank node in predicate position of c3 hash; subject:'${sc1_subject}', predicate:'${sc1_predicate}'`);\n\t\t\t\t}\n\t\t\t\t// create predicate\n\t\t\t\tlet kt_predicate = factory.c1_named_node(sc1_predicate, h_prefixes);\n\t\t\t\t// tersify rdf:type\n\t\t\t\tlet st_predicate = kt_predicate.isRdfTypeAlias? 'a': kt_predicate.terse(h_prefixes);\n\t\t\t\t// serialize predicate and object(s)\n\t\t\t\ts_write += s_term_pairs+s_indent_pairs+st_predicate+' '+st_objects;\n\t\t\t\t// update state\n\t\t\t\tthis._xc_state = 2;\n\t\t\t\t\t// // string buffer became too large\n\t\t\t\t\t// if(s_write.length >= N_MAX_STRING_BUFFER) {\n\t\t\t\t\t// \tdebugger;\n\t\t\t\t\t// }\n\t\t\t\t// terminate next pair\n\t\t\t\ts_term_pairs = ' ;\\n';\n\t\t\t\t// indent next pair\n\t\t\t\ts_indent_pairs = s_indent;\n\t\t\t\t// call exit predicate listener\n\t\t\t\tif(f_exit_predicate) f_exit_predicate();\n\t\t\t}\n\t\t\t// empty triples; cut out\n\t\t\tif(b_empty) {\n\t\t\t\ts_write = s_write.slice(0, i_triples)+s_write.slice(i_pairs);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// delimit triple(s)\n\t\t\ts_delim_triples = '\\n';\n\t\t\t// close triple\n\t\t\ts_write += `${s_term_pairs? ' ': s_indent_pairs}.\\n`; //\n\t\t\t// call exit subject listener\n\t\t\tif(f_exit_subject) f_exit_subject();\n\t\t}\n\n\t\ts_write += '\\n';\n\t\treturn s_write;\n\t}\n\n\n\t// serialize c4 hash\n\t_serialize_c4(hc4_quads) {\n\t\tlet {\n\t\t\t_h_prefixes: h_prefixes,\n\t\t\t_s_indent: s_indent,\n\n\t\t} = this;\n\t\t// break line if non-data state\n\t\tlet s_write = 2 !== this._xc_state? '\\n': '';\n\t\t// update state\n\t\tthis._xc_state = 2;\n\t\t// force default graph brace\n\t\tlet b_simplify_default_graph = this._b_simplify_default_graph;\n\n\t\t// graph token\n\t\tlet s_graph_keyword = this._s_graph_keyword;\n\n\t\t// graph exit listener\n\t\tlet f_exit_graph = null;\n\n\t\t// each graph\n\t\tfor(let sc1_graph in hc4_quads) {\n\t\t\t// directive\n\t\t\tif('`' === sc1_graph[0]) {\n\t\t\t\tlet g_apply = this._apply_directive(sc1_graph, hc4_quads[sc1_graph]);\n\n\t\t\t\t// write data\n\t\t\t\tif(g_apply.write) s_write += g_apply.write;\n\n\t\t\t\t// save exit listener\n\t\t\t\tif(g_apply.exit) f_exit_graph = g_apply.exit;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// serialize open graph\n\t\t\tlet st_graph = factory.c1_node(sc1_graph, h_prefixes).terse(h_prefixes);\n\n\t\t\ts_write += st_graph\n\t\t\t\t? s_graph_keyword+st_graph+' {\\n'\n\t\t\t\t: (b_simplify_default_graph? '': s_graph_keyword+'{\\n');\n\n\t\t\t// simplify default graph implies no indent\n\t\t\tlet s_indent_root = (!st_graph && b_simplify_default_graph)? '': s_indent;\n\n\t\t\t// update state\n\t\t\tthis._xc_state = 2;\n\n\t\t\t// ref triples\n\t\t\tlet hc3_triples = hc4_quads[sc1_graph];\n\n\t\t\t// triple delimiter\n\t\t\tlet s_delim_triples = '';\n\t\t\t// subject exit listener\n\t\t\tlet f_exit_subject = null;\n\t\t\t// each subject\n\t\t\tfor(let sc1_subject in hc3_triples) {\n\t\t\t\t// directive\n\t\t\t\tif('`' === sc1_subject[0]) {\n\t\t\t\t\tlet g_apply = this._apply_directive(sc1_subject, hc3_triples[sc1_subject]);\n\t\t\t\t\t// write data\n\t\t\t\t\tif(g_apply.write) {\n\t\t\t\t\t\ts_write += s_delim_triples+s_indent_root+g_apply.write;\n\t\t\t\t\t\t// do not break next line\n\t\t\t\t\t\ts_delim_triples = '';\n\t\t\t\t\t}\n\t\t\t\t\t// save exit listener\n\t\t\t\t\tif(g_apply.exit) f_exit_subject = g_apply.exit;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// position before subject\n\t\t\t\tlet i_triples = s_write.length;\n\t\t\t\t// serialize subject\n\t\t\t\ts_write += s_delim_triples+s_indent_root+factory.c1_node(sc1_subject, h_prefixes).terse(h_prefixes)+' ';\n\t\t\t\t// pair indent & terminator\n\t\t\t\tlet s_indent_pairs = '';\n\t\t\t\tlet s_term_pairs = '';\n\t\t\t\t// ref pairs\n\t\t\t\tlet hc2_pairs = hc3_triples[sc1_subject];\n\t\t\t\t// position before pairs\n\t\t\t\tlet i_pairs = s_write.length;\n\t\t\t\t// were objects written?\n\t\t\t\tlet b_empty = true;\n\t\t\t\t// predicate exit listener\n\t\t\t\tlet f_exit_predicate = null;\n\t\t\t\t// each predicate\n\t\t\t\tfor(let sc1_predicate in hc2_pairs) {\n\t\t\t\t\t// directive\n\t\t\t\t\tif('`' === sc1_predicate[0]) {\n\t\t\t\t\t\t// apply directive\n\t\t\t\t\t\tlet g_apply = this._apply_directive(sc1_predicate, hc2_pairs[sc1_predicate]);\n\t\t\t\t\t\t// write data\n\t\t\t\t\t\tif(g_apply.write) {\n\t\t\t\t\t\t\t// break line\n\t\t\t\t\t\t\ts_write += (s_indent_pairs? s_term_pairs: '\\n')+s_indent+s_indent_root+g_apply.write;\n\t\t\t\t\t\t\t// pair already terminated\n\t\t\t\t\t\t\ts_term_pairs = '';\n\t\t\t\t\t\t\t// indent next pair\n\t\t\t\t\t\t\ts_indent_pairs = s_indent+s_indent_root;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// save exit listener\n\t\t\t\t\t\tif(g_apply.exit) f_exit_predicate = g_apply.exit;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// ref objects\n\t\t\t\t\tlet z_objects = hc2_pairs[sc1_predicate];\n\t\t\t\t\t// serialize objects\n\t\t\t\t\tlet st_objects = this._encode_objects(z_objects);\n\t\t\t\t\t// no objects; skip pair\n\t\t\t\t\tif(!st_objects) continue;\n\t\t\t\t\t// not empty\n\t\t\t\t\tb_empty = false;\n\t\t\t\t\t// cannot use blank node in predicate position\n\t\t\t\t\tif('_' === sc1_predicate[0] && ':' === sc1_predicate[1]) {\n\t\t\t\t\t\tthrow new Error(`Cannot use blank node in predicate position of c4 hash; graph:'${sc1_graph}', subject:'${sc1_subject}', predicate:'${sc1_predicate}'`);\n\t\t\t\t\t}\n\t\t\t\t\t// create predicate\n\t\t\t\t\tlet kt_predicate = factory.c1_named_node(sc1_predicate, h_prefixes);\n\t\t\t\t\t// tersify rdf:type\n\t\t\t\t\tlet st_predicate = kt_predicate.isRdfTypeAlias? 'a': kt_predicate.terse(h_prefixes);\n\t\t\t\t\t// serialize predicate and object(s)\n\t\t\t\t\ts_write += s_term_pairs+s_indent_pairs+st_predicate+' '+st_objects;\n\t\t\t\t\t// update state\n\t\t\t\t\tthis._xc_state = 2;\n\t\t\t\t\t// // string buffer became too large\n\t\t\t\t\t// if(s_write.length >= N_MAX_STRING_BUFFER) {\n\t\t\t\t\t// \tdebugger;\n\t\t\t\t\t// }\n\t\t\t\t\t// terminate next pair\n\t\t\t\t\ts_term_pairs = ' ;\\n';\n\t\t\t\t\t// indent next pair\n\t\t\t\t\ts_indent_pairs = s_indent+s_indent_root;\n\t\t\t\t\t// call exit predicate listener\n\t\t\t\t\tif(f_exit_predicate) f_exit_predicate();\n\t\t\t\t}\n\t\t\t\t// empty triples; cut out\n\t\t\t\tif(b_empty) {\n\t\t\t\t\ts_write = s_write.slice(0, i_triples)+s_write.slice(i_pairs);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// delimit triple(s)\n\t\t\t\ts_delim_triples = '\\n';\n\t\t\t\t// close triple\n\t\t\t\ts_write += `${s_term_pairs? ' ': s_indent_pairs}.\\n`; // \\n\n\t\t\t\t// call exit subject listener\n\t\t\t\tif(f_exit_subject) f_exit_subject();\n\t\t\t}\n\t\t\t// close graph\n\t\t\ts_write += ((st_graph || !b_simplify_default_graph)? '}\\n': '')+'\\n';\n\n\t\t\t// call exit graph listener\n\t\t\tif(f_exit_graph) f_exit_graph();\n\t\t}\n\t\treturn s_write;\n\t}\n\n\t// write objects\n\t_encode_objects(z_objects, n_nest_level=1) {\n\t\tlet {\n\t\t\t_h_prefixes: h_prefixes,\n\t\t\t_s_indent: s_indent,\n\t\t\t_hm_coercions: hm_coercions,\n\t\t} = this;\n\n\t\t// deduce object value type\n\t\tswitch(typeof z_objects) {\n\t\t\t// concise-term string\n\t\t\tcase 'string': return factory.c1(z_objects, h_prefixes).terse(h_prefixes);\n\n\t\t\t// numeric type\n\t\t\tcase 'number': return factory.number(z_objects).terse(h_prefixes);\n\n\t\t\t// boolean type\n\t\t\tcase 'boolean': return factory.boolean(z_objects).terse(h_prefixes);\n\n\t\t\t// object\n\t\t\tcase 'object': {\n\t\t\t\t// null; reject\n\t\t\t\tif(null === z_objects) throw new Error('Refusing to serialize null value given as an object of quad');\n\n\t\t\t\t// array, list of objects\n\t\t\t\tif(Array.isArray(z_objects) || z_objects instanceof Set) {\n\t\t\t\t\tlet s_write = '';\n\n\t\t\t\t\t// object terminator\n\t\t\t\t\tlet s_term_object = '';\n\n\t\t\t\t\t// each object\n\t\t\t\t\tfor(let z_item of z_objects) {\n\t\t\t\t\t\t// item is an array; serialize list\n\t\t\t\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\t\t\t\ts_write += s_term_object + this._serialize_list_object(z_item, n_nest_level);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// non-array\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// recurse on item\n\t\t\t\t\t\t\ts_write += s_term_object + this._encode_objects(z_item, n_nest_level);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// terminate next object\n\t\t\t\t\t\ts_term_object = ', ';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn s_write;\n\t\t\t\t}\n\t\t\t\t// plain object, blank node\n\t\t\t\telse if(Object === z_objects.constructor) {\n\t\t\t\t\t// open blank node block\n\t\t\t\t\tlet s_write = '[';\n\n\t\t\t\t\t// whether the block is empty\n\t\t\t\t\tlet b_empty = true;\n\n\t\t\t\t\t// object exit listener\n\t\t\t\t\tlet f_exit_object = null;\n\n\t\t\t\t\t// each pair\n\t\t\t\t\tfor(let sc1_predicate in z_objects) {\n\t\t\t\t\t\t// block is not empty\n\t\t\t\t\t\tb_empty = false;\n\n\t\t\t\t\t\t// terminate previous pair\n\t\t\t\t\t\ts_write += '\\n'+s_indent.repeat(2+n_nest_level);\n\n\t\t\t\t\t\t// directive; serialize it\n\t\t\t\t\t\tif('`' === sc1_predicate[0]) {\n\t\t\t\t\t\t\tlet g_apply = this._apply_directive(sc1_predicate, z_objects[sc1_predicate]);\n\n\t\t\t\t\t\t\t// write data\n\t\t\t\t\t\t\tif(g_apply.write) s_write += g_apply.write;\n\n\t\t\t\t\t\t\t// save exit listener\n\t\t\t\t\t\t\tif(g_apply.exit) f_exit_object = g_apply.exit;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// write predicate and object(s)\n\t\t\t\t\t\ts_write += factory.c1(sc1_predicate, h_prefixes).terse(h_prefixes) + ' '\n\t\t\t\t\t\t\t+ this._encode_objects(z_objects[sc1_predicate], n_nest_level+1) +' ;';\n\t\t\t\t\t}\n\n\t\t\t\t\t// close blank node block\n\t\t\t\t\ts_write += (b_empty? '': '\\n'+s_indent.repeat(1+n_nest_level))+']';\n\n\t\t\t\t\t// call exit object listener\n\t\t\t\t\tif(f_exit_object) f_exit_object();\n\n\t\t\t\t\t// serialize current predicate to blank node\n\t\t\t\t\treturn s_write;\n\t\t\t\t}\n\t\t\t\t// coercable instance\n\t\t\t\telse if(hm_coercions.has(z_objects.constructor)) {\n\t\t\t\t\t// convert javascript object to term object\n\t\t\t\t\tlet kt_converted = hm_coercions.get(z_objects.constructor).apply(this, [z_objects, n_nest_level]);\n\n\t\t\t\t\t// serialize\n\t\t\t\t\treturn kt_converted.terse(h_prefixes);\n\t\t\t\t}\n\t\t\t\t// graphy term\n\t\t\t\telse if(z_objects.isGraphyTerm) {\n\t\t\t\t\treturn z_objects.terse(h_prefixes);\n\t\t\t\t}\n\t\t\t\t// RDFJS term\n\t\t\t\telse if(z_objects.termType) {\n\t\t\t\t\treturn factory.from.term(z_objects).terse(h_prefixes);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// fallthrough: other\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`Bad type for RDF object: [${typeof z_objects}] ${z_objects? z_objects.constructor: z_objects}`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// serialize collection object\n\t_serialize_collection_object(a_collection, n_nest_level) {\n\t\tlet s_indent = this._s_indent;\n\n\t\t// open collection block\n\t\tlet s_write = '(';\n\n\t\t// each item\n\t\tfor(let z_item of a_collection) {\n\t\t\tlet s_objects = '';\n\n\t\t\t// item is array; serialize as sub-collection\n\t\t\tif(Array.isArray(z_item)) {\n\t\t\t\ts_objects = this._serialize_collection_object(z_item, n_nest_level+1);\n\t\t\t}\n\t\t\t// non-array item\n\t\t\telse {\n\t\t\t\ts_objects = this._encode_objects(z_item, n_nest_level+1);\n\t\t\t}\n\n\t\t\t// serialize collection\n\t\t\ts_write += '\\n'+s_indent.repeat(2+n_nest_level)+s_objects;\n\t\t}\n\n\t\t// break line if anything was written (including comments)\n\t\tif(a_collection.length) s_write += '\\n'+s_indent.repeat(1+n_nest_level);\n\n\t\t// close collection block\n\t\ts_write += ')';\n\n\t\treturn s_write;\n\t}\n\n\t// rdfjs quad\n\t_serialize_quad(g_quad) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet kq_quad = factory.from.quad(g_quad);\n\n\t\tlet st_graph = kq_quad.graph.terse(h_prefixes);\n\n\t\t// serialize quad\n\t\tthis._s_push += (2 !== this._xc_state? '\\n': '')\n\t\t\t\t\t\t\t+this._s_graph_keyword+(st_graph? st_graph+' ': '')+'{\\n\\t'\n\t\t\t\t\t\t+kq_quad.subject.terse(h_prefixes)+' '\n\t\t\t+kq_quad.predicate.terse(h_prefixes)+' '\n\t\t\t+kq_quad.object.terse(h_prefixes)+' .\\n'\n\t\t\t\t\t\t\t+'}\\n\\n';\n\n\n\t\t// update state\n\t\tthis._xc_state = 2;\n\t}\n}\n\nObject.assign(TriG_Writer.prototype, {\n\tanonymous_blank_nodes: true,\n\t_serialize_c3r: TriG_Writer.prototype._serialize_c3,\n\t_serialize_c4r: TriG_Writer.prototype._serialize_c4,\n\t_serialize_comment: Writable.prototype._serialize_hash_comment,\n\t_serialize_list_object: TriG_Writer.prototype._serialize_collection_object,\n});\n\nmodule.exports = function(gc_writer) {\n\treturn new TriG_Writer(gc_writer);\n};\n"],"sourceRoot":""}