(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-5912d2c4"],{"8b4e":function(t,e,r){const s=r("bee8"),o=r("46bd"),n=r("9b92"),a=r("e372");class c extends a{constructor(t,{baseIRI:e="",context:r=null,factory:o=n}={}){super({objectMode:!0,read:()=>{}}),this.baseIRI=e,this.context=r,this.factory=o;const a=s({encoding:"string"},t=>{t?this.parse(t).then(()=>{this.push(null)}).catch(t=>{this.emit("error",t)}):this.push(null)});t.pipe(a),t.on("error",t=>{this.emit("error",t)})}term(t){switch(t.termType){case"NamedNode":return t.value.startsWith("null:/")?this.factory.namedNode(t.value.slice(6)):this.factory.namedNode(t.value);case"BlankNode":return this.factory.blankNode(t.value.substr(2));case"Literal":return this.factory.literal(t.value,t.language||this.factory.namedNode(t.datatype.value));case"DefaultGraph":return this.factory.defaultGraph();default:throw Error("unknown termType: "+t.termType)}}parse(t){return c.toPlainObject(t).then(t=>{"object"===typeof t["@context"]&&Object.keys(t["@context"]).forEach(e=>{this.emit("prefix",e,this.factory.namedNode(t["@context"][e]))});const e={base:this.baseIRI||"null:/"};return this.context&&(e.expandContext=this.context),o.promises.toRDF(t,e)}).then(t=>{t.forEach(t=>{this.push(this.factory.quad(this.term(t.subject),this.term(t.predicate),this.term(t.object),this.term(t.graph)))})})}static toPlainObject(t){return"string"===typeof t?new Promise((e,r)=>{try{e(JSON.parse(t))}catch(s){r(s)}}):"object"===typeof t?Promise.resolve(t):Promise.reject(new Error("unknown type"))}}t.exports=c},cd05:function(t,e,r){const s=r("8b4e"),o=r("6fd6");class n extends o{constructor(t){super(s,t)}}t.exports=n}}]);
//# sourceMappingURL=chunk-5912d2c4.7c2ec62c.js.map