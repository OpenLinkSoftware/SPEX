{"version":3,"sources":["webpack:///./node_modules/@rdfjs/serializer-jsonld/lib/ObjectEncoder.js","webpack:///./node_modules/@rdfjs/serializer-jsonld/lib/SerializerStream.js","webpack:///./node_modules/@rdfjs/serializer-jsonld/index.js","webpack:///./node_modules/@rdfjs/serializer-jsonld/lib/StringEncoder.js"],"names":["ObjectEncoder","stream","this","array","jsonld","push","module","exports","Readable","StringEncoder","SerializerStream","input","encoding","super","objectMode","read","encoder","Error","on","quad","triple","graph","termType","value","subjectValue","subject","predicate","object","objectValue","end","err","emit","language","datatype","Sink","Serializer","options","first","JSON","stringify"],"mappings":"mGAAA,MAAMA,EACJ,YAAaC,GACXC,KAAKD,OAASA,EACdC,KAAKC,MAAQ,GAGf,KAAMC,GACJF,KAAKC,MAAME,KAAKD,GAGlB,MACEF,KAAKD,OAAOI,KAAKH,KAAKC,OACtBD,KAAKD,OAAOI,KAAK,OAIrBC,EAAOC,QAAUP,G,uBChBjB,MAAMQ,EAAW,EAAQ,QACnBR,EAAgB,EAAQ,QACxBS,EAAgB,EAAQ,QAE9B,MAAMC,UAAyBF,EAC7B,YAAaG,GAAO,SAAEC,EAAW,UAAa,IAc5C,GAbAC,MAAM,CACJC,YAAY,EACZC,KAAM,SAGS,WAAbH,IACFV,KAAKc,QAAU,IAAIhB,EAAcE,OAGlB,WAAbU,IACFV,KAAKc,QAAU,IAAIP,EAAcP,QAG9BA,KAAKc,QACR,MAAM,IAAIC,MAAM,qBAAqBL,GAGvCD,EAAMO,GAAG,OAAQC,IACf,MAAMf,EAAS,GACf,IAAIgB,EAAShB,EAEe,iBAAxBe,EAAKE,MAAMC,WACblB,EAAO,OAASe,EAAKE,MAAME,MAC3BnB,EAAO,UAAY,GACnBgB,EAAShB,EAAO,WAGlBgB,EAAO,OAASV,EAAiBc,aAAaL,EAAKM,SAEtB,oDAAzBN,EAAKO,UAAUH,MACjBH,EAAO,SAAWV,EAAiBc,aAAaL,EAAKQ,QAErDP,EAAOD,EAAKO,UAAUH,OAASb,EAAiBkB,YAAYT,EAAKQ,QAGnEzB,KAAKc,QAAQX,KAAKD,KAGpBO,EAAMO,GAAG,MAAO,IAAMhB,KAAKc,QAAQa,OAEnClB,EAAMO,GAAG,QAASY,GAAO5B,KAAK6B,KAAK,QAASD,IAG9C,oBAAqBL,GACnB,MAA4B,cAArBA,EAAQH,SAA2B,KAAOG,EAAQF,MAAQE,EAAQF,MAG3E,mBAAoBI,GAClB,MAAwB,cAApBA,EAAOL,SACF,CAAE,MAAOK,EAAOJ,OAGD,cAApBI,EAAOL,SACF,CAAE,MAAO,KAAOK,EAAOJ,OAG5BI,EAAOK,SACF,CAAE,YAAaL,EAAOK,SAAU,SAAUL,EAAOJ,OAC/CI,EAAOM,UAAsC,4CAA1BN,EAAOM,SAASV,MACrC,CAAE,QAASI,EAAOM,SAASV,MAAO,SAAUI,EAAOJ,OAEnDI,EAAOJ,OAKpBjB,EAAOC,QAAUG,G,qBCxEjB,MAAMA,EAAmB,EAAQ,QAC3BwB,EAAO,EAAQ,QAErB,MAAMC,UAAmBD,EACvB,YAAaE,GACXvB,MAAMH,EAAkB0B,IAI5B9B,EAAOC,QAAU4B,G,mBCTjB,MAAM1B,EACJ,YAAaR,GACXC,KAAKD,OAASA,EACdC,KAAKmC,OAAQ,EAEbnC,KAAKD,OAAOI,KAAK,KAGnB,KAAMD,GACAF,KAAKmC,MACPnC,KAAKmC,OAAQ,EAEbnC,KAAKD,OAAOI,KAAK,KAGnBH,KAAKD,OAAOI,KAAKiC,KAAKC,UAAUnC,IAGlC,MACEF,KAAKD,OAAOI,KAAK,KACjBH,KAAKD,OAAOI,KAAK,OAIrBC,EAAOC,QAAUE","file":"js/chunk-61d2364b.53dc7d99.js","sourcesContent":["class ObjectEncoder {\n  constructor (stream) {\n    this.stream = stream\n    this.array = []\n  }\n\n  push (jsonld) {\n    this.array.push(jsonld)\n  }\n\n  end () {\n    this.stream.push(this.array)\n    this.stream.push(null)\n  }\n}\n\nmodule.exports = ObjectEncoder\n","const Readable = require('readable-stream')\nconst ObjectEncoder = require('./ObjectEncoder')\nconst StringEncoder = require('./StringEncoder')\n\nclass SerializerStream extends Readable {\n  constructor (input, { encoding = 'object' } = {}) {\n    super({\n      objectMode: true,\n      read: () => {}\n    })\n\n    if (encoding === 'object') {\n      this.encoder = new ObjectEncoder(this)\n    }\n\n    if (encoding === 'string') {\n      this.encoder = new StringEncoder(this)\n    }\n\n    if (!this.encoder) {\n      throw new Error(`unknown encoding: ${encoding}`)\n    }\n\n    input.on('data', quad => {\n      const jsonld = {}\n      let triple = jsonld\n\n      if (quad.graph.termType !== 'DefaultGraph') {\n        jsonld['@id'] = quad.graph.value\n        jsonld['@graph'] = {}\n        triple = jsonld['@graph']\n      }\n\n      triple['@id'] = SerializerStream.subjectValue(quad.subject)\n\n      if (quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type') {\n        triple['@type'] = SerializerStream.subjectValue(quad.object)\n      } else {\n        triple[quad.predicate.value] = SerializerStream.objectValue(quad.object)\n      }\n\n      this.encoder.push(jsonld)\n    })\n\n    input.on('end', () => this.encoder.end())\n\n    input.on('error', err => this.emit('error', err))\n  }\n\n  static subjectValue (subject) {\n    return subject.termType === 'BlankNode' ? '_:' + subject.value : subject.value\n  }\n\n  static objectValue (object) {\n    if (object.termType === 'NamedNode') {\n      return { '@id': object.value }\n    }\n\n    if (object.termType === 'BlankNode') {\n      return { '@id': '_:' + object.value }\n    }\n\n    if (object.language) {\n      return { '@language': object.language, '@value': object.value }\n    } else if (object.datatype && object.datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n      return { '@type': object.datatype.value, '@value': object.value }\n    } else {\n      return object.value\n    }\n  }\n}\n\nmodule.exports = SerializerStream\n","const SerializerStream = require('./lib/SerializerStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Serializer extends Sink {\n  constructor (options) {\n    super(SerializerStream, options)\n  }\n}\n\nmodule.exports = Serializer\n","class StringEncoder {\n  constructor (stream) {\n    this.stream = stream\n    this.first = true\n\n    this.stream.push('[')\n  }\n\n  push (jsonld) {\n    if (this.first) {\n      this.first = false\n    } else {\n      this.stream.push(',')\n    }\n\n    this.stream.push(JSON.stringify(jsonld))\n  }\n\n  end () {\n    this.stream.push(']')\n    this.stream.push(null)\n  }\n}\n\nmodule.exports = StringEncoder\n"],"sourceRoot":""}