{"version":3,"sources":["webpack:///./node_modules/rdf-data-factory/lib/DataFactory.js","webpack:///./node_modules/sax/lib/sax.js","webpack:///./node_modules/rdf-data-factory/lib/DefaultGraph.js","webpack:///./node_modules/rdf-data-factory/lib/BlankNode.js","webpack:///./node_modules/rdfxml-streaming-parser/index.js","webpack:///./node_modules/rdf-data-factory/lib/Quad.js","webpack:///./node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","webpack:///./node_modules/rdf-data-factory/lib/Literal.js","webpack:///./node_modules/rdf-data-factory/lib/NamedNode.js","webpack:///./node_modules/rdf-data-factory/lib/Variable.js","webpack:///./node_modules/relative-to-absolute-iri/lib/Resolve.js","webpack:///./node_modules/rdf-data-factory/index.js","webpack:///./node_modules/rdfxml-streaming-parser/lib/ParseError.js","webpack:///./node_modules/relative-to-absolute-iri/index.js"],"names":["Object","defineProperty","exports","value","DataFactory","BlankNode_1","DefaultGraph_1","Literal_1","NamedNode_1","Quad_1","Variable_1","dataFactoryCounter","options","this","blankNodeCounter","blankNodePrefix","NamedNode","BlankNode","languageOrDatatype","Literal","Variable","DefaultGraph","INSTANCE","subject","predicate","object","graph","Quad","defaultGraph","original","termType","namedNode","blankNode","language","literal","datatype","equals","XSD_STRING","fromTerm","variable","quad","sax","parser","strict","opt","SAXParser","SAXStream","createStream","MAX_BUFFER_LENGTH","Stream","buffers","clearBuffers","q","c","bufferCheckPosition","lowercase","lowercasetags","looseCase","tags","closed","closedRoot","sawRoot","tag","error","noscript","state","S","BEGIN","strictEntities","ENTITIES","create","XML_ENTITIES","attribList","xmlns","ns","rootNS","trackPosition","position","line","column","emit","checkBufferLength","maxAllowed","Math","max","maxActual","i","l","length","len","closeText","emitNode","cdata","script","m","flushBuffers","EVENTS","o","F","prototype","newf","keys","a","hasOwnProperty","push","end","write","resume","close","flush","ex","streamWraps","filter","ev","apply","_parser","writable","readable","me","onend","onerror","er","_decoder","forEach","get","set","h","removeAllListeners","on","enumerable","configurable","constructor","data","Buffer","isBuffer","SD","StringDecoder","toString","chunk","handler","indexOf","args","arguments","Array","splice","call","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","xml","nameStart","nameBody","entityStart","entityBody","isWhitespace","isQuote","isAttribEnd","isMatch","regex","test","notMatch","s","STATE","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","key","e","String","fromCharCode","event","nodeType","textNode","textopts","text","trim","normalize","replace","Error","strictFail","message","newTag","tagName","parent","name","attributes","qname","attribute","qualName","split","prefix","local","attrib","attribName","attribValue","qn","openTag","selfClosing","uri","JSON","stringify","p","nv","isSelfClosing","toLowerCase","closeTag","t","closeTo","pop","x","n","parseEntity","num","entity","entityLC","numStr","charAt","slice","parseInt","isNaN","fromCodePoint","beginWhiteSpace","startTagPosition","result","starti","substring","sgmlDecl","procInstName","procInstBody","pad","join","toUpperCase","comment","doctype","body","returnState","buffer","stringFromCharCode","floor","highSurrogate","lowSurrogate","MAX_SIZE","codeUnits","index","codePoint","Number","isFinite","RangeError","other","__export","relative_to_absolute_iri_1","sax_1","stream_1","ParseError_1","rdf_data_factory_1","RdfXmlParser","Transform","super","readableObjectMode","activeTagStack","nodeIds","assign","dataFactory","baseIRI","saxStream","attachSaxListeners","parentTag","thisNs","hasNs","attributeKey","startsWith","substr","parentNs","DEFAULT_NS","concat","term","colonIndex","defaultNamespace","nsElement","ParseError","iri","IRI_REGEX","stream","output","PassThrough","parsed","pipe","encoding","callback","activeTag","uriToNamedNode","resolve","isValidIri","newParseError","NCNAME_MATCHER","onTag","bind","onText","onCloseTag","onDoctype","currentParseType","ParseType","RESOURCE","hadChildren","childrenParseType","childrenStringTags","tagContents","tagString","stringActiveTag","childrenStringEmitClosingTag","parseNamespace","onTagResource","onTagProperty","rootTag","tagExpanded","expandPrefixedTerm","PROPERTY","typedNode","RDF","FORBIDDEN_NODE_ELEMENTS","predicates","objects","activeSubjectValue","claimSubjectNodeId","subjectValueBlank","explicitType","attributeValue","attributeKeyExpanded","validateNcname","XML","valueToUri","claimNodeId","type","emitTriple","reifiedStatementId","childrenCollectionSubject","linkTerm","childrenCollectionPredicate","predicateSubPredicates","predicateSubObjects","predicateEmitted","listItemCounter","FORBIDDEN_PROPERTY_ELEMENTS","parseType","attributedProperty","activeSubSubjectValue","subSubjectValueBlank","propertyAttributeKey","propertyAttributeValue","propertyAttributeKeyExpanded","nestedBNode","childrenTagsToString","subjectParent","statementId","allowDuplicateRdfIds","poppedTag","match","MIME_TYPE","XMLNS","RDF_LANGUAGE_STRING","relativeIRI","baseFragmentPos","baseQueryPos","relativeColonPos","removeDotSegmentsOfPath","valueColonPos","baseColonPos","baseIRIScheme","baseSlashAfterColonPos","removeDotSegments","baseIRIPath","baseIRILastSlashPos","lastIndexOf","path","segmentBuffers","isCharacterAllowedAfterRelativePathSegment","map","colonPosition","searchOffset","pathSeparator","base","character","__createBinding","k","k2","undefined","__exportStar","saxParser"],"mappings":"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","file":"js/chunk-076d5769.5c6fad8e.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n//# sourceMappingURL=DefaultGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n//# sourceMappingURL=BlankNode.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./lib/RdfXmlParser\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n//# sourceMappingURL=Quad.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst sax_1 = require(\"sax\");\nconst stream_1 = require(\"stream\");\nconst ParseError_1 = require(\"./ParseError\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nclass RdfXmlParser extends stream_1.Transform {\n    constructor(args) {\n        super({ readableObjectMode: true });\n        this.activeTagStack = [];\n        this.nodeIds = {};\n        if (args) {\n            Object.assign(this, args);\n            this.options = args;\n        }\n        if (!this.dataFactory) {\n            this.dataFactory = new rdf_data_factory_1.DataFactory();\n        }\n        if (!this.baseIRI) {\n            this.baseIRI = '';\n        }\n        if (!this.defaultGraph) {\n            this.defaultGraph = this.dataFactory.defaultGraph();\n        }\n        this.saxStream = sax_1.createStream(this.strict, { xmlns: false, position: this.trackPosition });\n        // Workaround for an issue in SAX where non-strict mode either lower- or upper-cases all tags.\n        if (!this.strict) {\n            this.saxStream._parser.looseCase = 'toString';\n        }\n        this.attachSaxListeners();\n    }\n    /**\n     * Parse the namespace of the given tag,\n     * and take into account the namespace of the parent tag that was already parsed.\n     * @param {Tag} tag A tag to parse the namespace from.\n     * @param {IActiveTag} parentTag The parent tag, or null if this tag is the root.\n     * @return {{[p: string]: string}[]} An array of namespaces,\n     *                                   where the last ones have a priority over the first ones.\n     */\n    static parseNamespace(tag, parentTag) {\n        const thisNs = {};\n        let hasNs = false;\n        for (const attributeKey in tag.attributes) {\n            if (attributeKey.startsWith('xmlns')) {\n                if (attributeKey.length === 5) {\n                    // Set default namespace\n                    hasNs = true;\n                    thisNs[''] = tag.attributes[attributeKey];\n                }\n                else if (attributeKey.charAt(5) === ':') {\n                    // Definition of a prefix\n                    hasNs = true;\n                    thisNs[attributeKey.substr(6)] = tag.attributes[attributeKey];\n                }\n            }\n        }\n        const parentNs = parentTag && parentTag.ns ? parentTag.ns : [RdfXmlParser.DEFAULT_NS];\n        return hasNs ? parentNs.concat([thisNs]) : parentNs;\n    }\n    /**\n     * Expand the given term value based on the given namespaces.\n     * @param {string} term A term value.\n     * @param {{[p: string]: string}[]} ns An array of namespaces,\n     *                                     where the last ones have a priority over the first ones.\n     * @param {RdfXmlParser} parser The RDF/XML parser instance.\n     * @return {IExpandedPrefix} An expanded prefix object.\n     */\n    static expandPrefixedTerm(term, ns, parser) {\n        const colonIndex = term.indexOf(':');\n        let prefix;\n        let local;\n        if (colonIndex >= 0) {\n            // Prefix is set\n            prefix = term.substr(0, colonIndex);\n            local = term.substr(colonIndex + 1);\n        }\n        else {\n            // Prefix is not set, fallback to default namespace\n            prefix = '';\n            local = term;\n        }\n        let uri = null;\n        let defaultNamespace = null;\n        for (let i = ns.length - 1; i >= 0; i--) {\n            const nsElement = ns[i][prefix];\n            if (nsElement) {\n                uri = nsElement;\n                break;\n            }\n            else if (!defaultNamespace) {\n                defaultNamespace = ns[i][''];\n            }\n        }\n        if (!uri) {\n            // Error on unbound prefix\n            if (prefix && prefix !== 'xmlns') {\n                throw new ParseError_1.ParseError(parser, `The prefix '${prefix}' in term '${term}' was not bound.`);\n            }\n            // Fallback to default namespace if no match was found\n            uri = defaultNamespace || '';\n        }\n        return { prefix, local, uri };\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return RdfXmlParser.IRI_REGEX.test(iri);\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new RdfXmlParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        try {\n            this.saxStream.write(chunk, encoding);\n        }\n        catch (e) {\n            return callback(e);\n        }\n        callback();\n    }\n    /**\n     * Create a new parse error instance.\n     * @param {string} message An error message.\n     * @return {Error} An error instance.\n     */\n    newParseError(message) {\n        return new ParseError_1.ParseError(this, message);\n    }\n    /**\n     * Convert the given value to a IRI by taking into account the baseIRI.\n     *\n     * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.\n     *\n     * @param {string} value The value to convert to an IRI.\n     * @param {IActiveTag} activeTag The active tag.\n     * @return {NamedNode} an IRI.\n     */\n    valueToUri(value, activeTag) {\n        return this.uriToNamedNode(relative_to_absolute_iri_1.resolve(value, activeTag.baseIRI));\n    }\n    /**\n     * Convert the given value URI string to a named node.\n     *\n     * This throw an error if the URI is invalid.\n     *\n     * @param {string} uri A URI string.\n     * @return {NamedNode} a named node.\n     */\n    uriToNamedNode(uri) {\n        // Validate URI\n        if (!RdfXmlParser.isValidIri(uri)) {\n            throw this.newParseError(`Invalid URI: ${uri}`);\n        }\n        return this.dataFactory.namedNode(uri);\n    }\n    /**\n     * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n     * If it is invalid, an error will thrown emitted.\n     * @param {string} value A value.\n     */\n    validateNcname(value) {\n        // Validate term as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n        if (!RdfXmlParser.NCNAME_MATCHER.test(value)) {\n            throw this.newParseError(`Not a valid NCName: ${value}`);\n        }\n    }\n    attachSaxListeners() {\n        this.saxStream.on('error', (error) => this.emit('error', error));\n        this.saxStream.on('opentag', this.onTag.bind(this));\n        this.saxStream.on('text', this.onText.bind(this));\n        this.saxStream.on('closetag', this.onCloseTag.bind(this));\n        this.saxStream.on('doctype', this.onDoctype.bind(this));\n    }\n    /**\n     * Handle the given tag.\n     * @param {QualifiedTag} tag A SAX tag.\n     */\n    onTag(tag) {\n        // Get parent tag\n        const parentTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        let currentParseType = ParseType.RESOURCE;\n        if (parentTag) {\n            parentTag.hadChildren = true;\n            currentParseType = parentTag.childrenParseType;\n        }\n        // Check if this tag needs to be converted to a string\n        if (parentTag && parentTag.childrenStringTags) {\n            // Convert this tag to a string\n            const tagName = tag.name;\n            let attributes = '';\n            for (const attributeKey in tag.attributes) {\n                attributes += ` ${attributeKey}=\"${tag.attributes[attributeKey]}\"`;\n            }\n            const tagContents = `${tagName}${attributes}`;\n            const tagString = `<${tagContents}>`;\n            parentTag.childrenStringTags.push(tagString);\n            // Inherit the array, so that deeper tags are appended to this same array\n            const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };\n            stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;\n            this.activeTagStack.push(stringActiveTag);\n            // Halt any further processing\n            return;\n        }\n        const activeTag = {};\n        if (parentTag) {\n            // Inherit language scope and baseIRI from parent\n            activeTag.language = parentTag.language;\n            activeTag.baseIRI = parentTag.baseIRI;\n        }\n        else {\n            activeTag.baseIRI = this.baseIRI;\n        }\n        this.activeTagStack.push(activeTag);\n        activeTag.ns = RdfXmlParser.parseNamespace(tag, parentTag);\n        if (currentParseType === ParseType.RESOURCE) {\n            this.onTagResource(tag, activeTag, parentTag, !parentTag);\n        }\n        else { // currentParseType === ParseType.PROPERTY\n            this.onTagProperty(tag, activeTag, parentTag);\n        }\n    }\n    /**\n     * Handle the given node element in resource-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     * @param {boolean} rootTag If we are currently processing the root tag.\n     */\n    onTagResource(tag, activeTag, parentTag, rootTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.PROPERTY;\n        // Assume that the current node is a _typed_ node (2.13), unless we find an rdf:Description as node name\n        let typedNode = true;\n        if (tagExpanded.uri === RdfXmlParser.RDF) {\n            // Check forbidden property element names\n            if (!rootTag && RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n                throw this.newParseError(`Illegal node element name: ${tagExpanded.local}`);\n            }\n            switch (tagExpanded.local) {\n                case 'RDF':\n                    // Tags under <rdf:RDF> must always be resources\n                    activeTag.childrenParseType = ParseType.RESOURCE;\n                case 'Description':\n                    typedNode = false;\n            }\n        }\n        const predicates = [];\n        const objects = [];\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubjectValue = null;\n        let claimSubjectNodeId = false;\n        let subjectValueBlank = false;\n        let explicitType = null;\n        for (const attributeKey in tag.attributes) {\n            const attributeValue = tag.attributes[attributeKey];\n            const attributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(attributeKey, activeTag.ns, this);\n            if (parentTag && attributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (attributeKeyExpanded.local) {\n                    case 'about':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        activeSubjectValue = attributeValue;\n                        continue;\n                    case 'ID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = '#' + attributeValue;\n                        claimSubjectNodeId = true;\n                        continue;\n                    case 'nodeID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = attributeValue;\n                        subjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'type':\n                        // Emit the rdf:type later as named node instead of the default literal\n                        explicitType = attributeValue;\n                        continue;\n                    case 'aboutEach':\n                        throw this.newParseError(`rdf:aboutEach is not supported.`);\n                    case 'aboutEachPrefix':\n                        throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);\n                    case 'li':\n                        throw this.newParseError(`rdf:li on node elements are not supported.`);\n                }\n            }\n            else if (attributeKeyExpanded.uri === RdfXmlParser.XML) {\n                if (attributeKeyExpanded.local === 'lang') {\n                    activeTag.language = attributeValue === '' ? null : attributeValue.toLowerCase();\n                    continue;\n                }\n                else if (attributeKeyExpanded.local === 'base') {\n                    // SAX Parser does not expand xml:base, based on DOCTYPE, so we have to do it manually\n                    activeTag.baseIRI = relative_to_absolute_iri_1.resolve(attributeValue, activeTag.baseIRI);\n                    continue;\n                }\n            }\n            // Interpret attributes at this point as properties on this node,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (attributeKeyExpanded.prefix !== 'xml' && attributeKeyExpanded.uri) {\n                predicates.push(this.uriToNamedNode(attributeKeyExpanded.uri + attributeKeyExpanded.local));\n                objects.push(attributeValue);\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubjectValue !== null) {\n            activeTag.subject = subjectValueBlank\n                ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);\n            if (claimSubjectNodeId) {\n                this.claimNodeId(activeTag.subject);\n            }\n        }\n        // Force the creation of a subject if it doesn't exist yet\n        if (!activeTag.subject) {\n            activeTag.subject = this.dataFactory.blankNode();\n        }\n        // Emit the type if we're at a typed node\n        if (typedNode) {\n            const type = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), type, parentTag ? parentTag.reifiedStatementId : null);\n        }\n        if (parentTag) {\n            // If the parent tag defined a predicate, add the current tag as property value\n            if (parentTag.predicate) {\n                if (parentTag.childrenCollectionSubject) {\n                    // RDF:List-based properties\n                    const linkTerm = this.dataFactory.blankNode();\n                    // Emit <x> <p> <current-chain> OR <previous-chain> <rdf:rest> <current-chain>\n                    this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);\n                    // Emit <current-chain> <rdf:first> value\n                    this.emitTriple(linkTerm, this.dataFactory.namedNode(RdfXmlParser.RDF + 'first'), activeTag.subject, activeTag.reifiedStatementId);\n                    // Store <current-chain> in the parent node\n                    parentTag.childrenCollectionSubject = linkTerm;\n                    parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(RdfXmlParser.RDF + 'rest');\n                }\n                else { // !parentTag.predicateEmitted\n                    // Set-based properties\n                    this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);\n                    // Emit pending properties on the parent tag that had no defined subject yet.\n                    for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {\n                        this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);\n                    }\n                    // Cleanup so we don't emit them again when the parent tag is closed\n                    parentTag.predicateSubPredicates = [];\n                    parentTag.predicateSubObjects = [];\n                    parentTag.predicateEmitted = true;\n                }\n            }\n            // Emit all collected triples\n            for (let i = 0; i < predicates.length; i++) {\n                const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);\n                this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);\n            }\n            // Emit the rdf:type as named node instead of literal\n            if (explicitType) {\n                this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.uriToNamedNode(explicitType), null);\n            }\n        }\n    }\n    /**\n     * Handle the given property element in property-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     */\n    onTagProperty(tag, activeTag, parentTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.RESOURCE;\n        activeTag.subject = parentTag.subject; // Inherit parent subject\n        if (tagExpanded.uri === RdfXmlParser.RDF && tagExpanded.local === 'li') {\n            // Convert rdf:li to rdf:_x\n            if (!parentTag.listItemCounter) {\n                parentTag.listItemCounter = 1;\n            }\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + '_' + parentTag.listItemCounter++);\n        }\n        else {\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n        }\n        // Check forbidden property element names\n        if (tagExpanded.uri === RdfXmlParser.RDF\n            && RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n            throw this.newParseError(`Illegal property element name: ${tagExpanded.local}`);\n        }\n        activeTag.predicateSubPredicates = [];\n        activeTag.predicateSubObjects = [];\n        let parseType = false;\n        let attributedProperty = false;\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubSubjectValue = null;\n        let subSubjectValueBlank = true;\n        const predicates = [];\n        const objects = [];\n        for (const propertyAttributeKey in tag.attributes) {\n            const propertyAttributeValue = tag.attributes[propertyAttributeKey];\n            const propertyAttributeKeyExpanded = RdfXmlParser\n                .expandPrefixedTerm(propertyAttributeKey, activeTag.ns, this);\n            if (propertyAttributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (propertyAttributeKeyExpanded.local) {\n                    case 'resource':\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`Found both rdf:resource (${propertyAttributeValue}) and rdf:nodeID (${activeSubSubjectValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttributeValue})`);\n                        }\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = false;\n                        continue;\n                    case 'datatype':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttributeValue})`);\n                        }\n                        activeTag.datatype = this.valueToUri(propertyAttributeValue, activeTag);\n                        continue;\n                    case 'nodeID':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (activeTag.hadChildren) {\n                            throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttributeValue})`);\n                        }\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'parseType':\n                        // Validation\n                        if (attributedProperty) {\n                            throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);\n                        }\n                        if (activeTag.datatype) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);\n                        }\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);\n                        }\n                        if (propertyAttributeValue === 'Resource') {\n                            parseType = true;\n                            activeTag.childrenParseType = ParseType.PROPERTY;\n                            // Turn this property element into a node element\n                            const nestedBNode = this.dataFactory.blankNode();\n                            this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);\n                            activeTag.subject = nestedBNode;\n                            activeTag.predicate = null;\n                        }\n                        else if (propertyAttributeValue === 'Collection') {\n                            parseType = true;\n                            // Interpret children as being part of an rdf:List\n                            activeTag.hadChildren = true;\n                            activeTag.childrenCollectionSubject = activeTag.subject;\n                            activeTag.childrenCollectionPredicate = activeTag.predicate;\n                            subSubjectValueBlank = false;\n                        }\n                        else if (propertyAttributeValue === 'Literal') {\n                            parseType = true;\n                            // Interpret children as being part of a literal string\n                            activeTag.childrenTagsToString = true;\n                            activeTag.childrenStringTags = [];\n                        }\n                        continue;\n                    case 'ID':\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.reifiedStatementId = this.valueToUri('#' + propertyAttributeValue, activeTag);\n                        this.claimNodeId(activeTag.reifiedStatementId);\n                        continue;\n                }\n            }\n            else if (propertyAttributeKeyExpanded.uri === RdfXmlParser.XML\n                && propertyAttributeKeyExpanded.local === 'lang') {\n                activeTag.language = propertyAttributeValue === ''\n                    ? null : propertyAttributeValue.toLowerCase();\n                continue;\n            }\n            // Interpret attributes at this point as properties via implicit blank nodes on the property,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (propertyAttributeKeyExpanded.prefix !== 'xml' && propertyAttributeKeyExpanded.prefix !== 'xmlns'\n                && propertyAttributeKeyExpanded.uri) {\n                if (parseType || activeTag.datatype) {\n                    throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttributeValue}`);\n                }\n                activeTag.hadChildren = true;\n                attributedProperty = true;\n                predicates.push(this.uriToNamedNode(propertyAttributeKeyExpanded.uri + propertyAttributeKeyExpanded.local));\n                objects.push(this.dataFactory.literal(propertyAttributeValue, activeTag.datatype || activeTag.language));\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubSubjectValue !== null) {\n            const subjectParent = activeTag.subject;\n            activeTag.subject = subSubjectValueBlank\n                ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);\n            this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);\n            // Emit our buffered triples\n            for (let i = 0; i < predicates.length; i++) {\n                this.emitTriple(activeTag.subject, predicates[i], objects[i], null);\n            }\n            activeTag.predicateEmitted = true;\n        }\n        else if (subSubjectValueBlank) {\n            // The current property element has no defined subject\n            // Let's buffer the properties until the child node defines a subject,\n            // or if the tag closes.\n            activeTag.predicateSubPredicates = predicates;\n            activeTag.predicateSubObjects = objects;\n            activeTag.predicateEmitted = false;\n        }\n    }\n    /**\n     * Emit the given triple to the stream.\n     * @param {Term} subject A subject term.\n     * @param {Term} predicate A predicate term.\n     * @param {Term} object An object term.\n     * @param {Term} statementId An optional resource that identifies the triple.\n     *                           If truthy, then the given triple will also be emitted reified.\n     */\n    emitTriple(subject, predicate, object, statementId) {\n        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));\n        // Reify triple\n        if (statementId) {\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.dataFactory.namedNode(RdfXmlParser.RDF + 'Statement'), this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'subject'), subject, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'predicate'), predicate, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'object'), object, this.defaultGraph));\n        }\n    }\n    /**\n     * Register the given term as a node ID.\n     * If one was already registered, this will emit an error.\n     *\n     * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.\n     * @param {Term} term An RDF term.\n     */\n    claimNodeId(term) {\n        if (!this.allowDuplicateRdfIds) {\n            if (this.nodeIds[term.value]) {\n                throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);\n            }\n            this.nodeIds[term.value] = true;\n        }\n    }\n    /**\n     * Handle the given text string.\n     * @param {string} text A parsed text string.\n     */\n    onText(text) {\n        const activeTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        if (activeTag) {\n            if (activeTag.childrenStringTags) {\n                activeTag.childrenStringTags.push(text);\n            }\n            else if (activeTag.predicate) {\n                activeTag.text = text;\n            }\n        }\n    }\n    /**\n     * Handle the closing of the last tag.\n     */\n    onCloseTag() {\n        const poppedTag = this.activeTagStack.pop();\n        // If we were converting a tag to a string, and the tag was not self-closing, close it here.\n        if (poppedTag.childrenStringEmitClosingTag) {\n            poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);\n        }\n        // Set the literal value if we were collecting XML tags to string\n        if (poppedTag.childrenTagsToString) {\n            poppedTag.datatype = this.dataFactory.namedNode(RdfXmlParser.RDF + 'XMLLiteral');\n            poppedTag.text = poppedTag.childrenStringTags.join('');\n            poppedTag.hadChildren = false; // Force a literal triple to be emitted hereafter\n        }\n        if (poppedTag.childrenCollectionSubject) {\n            // Terminate the rdf:List\n            this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(RdfXmlParser.RDF + 'nil'), poppedTag.reifiedStatementId);\n        }\n        else if (poppedTag.predicate) {\n            if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {\n                // Property element contains text\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || '', poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);\n            }\n            else if (!poppedTag.predicateEmitted) {\n                // Emit remaining properties on an anonymous property element\n                const subject = this.dataFactory.blankNode();\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);\n                for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {\n                    this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);\n                }\n            }\n        }\n    }\n    /**\n     * Fetch local DOCTYPE ENTITY's and make the parser recognise them.\n     * @param {string} doctype The read doctype.\n     */\n    onDoctype(doctype) {\n        doctype.replace(/<!ENTITY\\s+([^\\s]+)\\s+[\"']([^\"']+)[\"']\\s*>/g, (match, prefix, uri) => {\n            this.saxStream._parser.ENTITIES[prefix] = uri;\n            return '';\n        });\n    }\n}\nexports.RdfXmlParser = RdfXmlParser;\n// Regex for valid IRIs\nRdfXmlParser.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*):[^ \"<>{}|\\\\\\[\\]`]*$/;\nRdfXmlParser.MIME_TYPE = 'application/rdf+xml';\nRdfXmlParser.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nRdfXmlParser.XML = 'http://www.w3.org/XML/1998/namespace';\nRdfXmlParser.XMLNS = 'http://www.w3.org/2000/xmlns/';\nRdfXmlParser.DEFAULT_NS = {\n    xml: RdfXmlParser.XML,\n};\nRdfXmlParser.FORBIDDEN_NODE_ELEMENTS = [\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'li',\n    'aboutEach',\n    'aboutEachPrefix',\n];\nRdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = [\n    'Description',\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'aboutEach',\n    'aboutEachPrefix',\n];\n// tslint:disable-next-line:max-line-length\nRdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_])([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_\\-.0-9#xB7\\u{0300}-\\u{036F}\\u{203F}-\\u{2040}])*$/u;\nvar ParseType;\n(function (ParseType) {\n    ParseType[ParseType[\"RESOURCE\"] = 0] = \"RESOURCE\";\n    ParseType[ParseType[\"PROPERTY\"] = 1] = \"PROPERTY\";\n})(ParseType = exports.ParseType || (exports.ParseType = {}));\n//# sourceMappingURL=RdfXmlParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\nconst NamedNode_1 = require(\"./NamedNode\");\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n        }\n        else if (languageOrDatatype) {\n            this.language = '';\n            this.datatype = languageOrDatatype;\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language && other.datatype.equals(this.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n//# sourceMappingURL=Literal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n//# sourceMappingURL=NamedNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n//# sourceMappingURL=Variable.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\nfunction resolve(relativeIRI, baseIRI) {\n    baseIRI = baseIRI || '';\n    const baseFragmentPos = baseIRI.indexOf('#');\n    // Ignore any fragments in the base IRI\n    if (baseFragmentPos > 0) {\n        baseIRI = baseIRI.substr(0, baseFragmentPos);\n    }\n    // Convert empty value directly to base IRI\n    if (!relativeIRI.length) {\n        // At this point, the baseIRI MUST be absolute, otherwise we error\n        if (baseIRI.indexOf(':') < 0) {\n            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n        }\n        return baseIRI;\n    }\n    // If the value starts with a query character, concat directly (but strip the existing query)\n    if (relativeIRI.startsWith('?')) {\n        const baseQueryPos = baseIRI.indexOf('?');\n        if (baseQueryPos > 0) {\n            baseIRI = baseIRI.substr(0, baseQueryPos);\n        }\n        return baseIRI + relativeIRI;\n    }\n    // If the value starts with a fragment character, concat directly\n    if (relativeIRI.startsWith('#')) {\n        return baseIRI + relativeIRI;\n    }\n    // Ignore baseIRI if it is empty\n    if (!baseIRI.length) {\n        const relativeColonPos = relativeIRI.indexOf(':');\n        if (relativeColonPos < 0) {\n            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);\n        }\n        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);\n    }\n    // Ignore baseIRI if the value is absolute\n    const valueColonPos = relativeIRI.indexOf(':');\n    if (valueColonPos >= 0) {\n        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // At this point, the baseIRI MUST be absolute, otherwise we error\n    const baseColonPos = baseIRI.indexOf(':');\n    if (baseColonPos < 0) {\n        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n    }\n    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);\n    // Inherit the baseIRI scheme if the value starts with '//'\n    if (relativeIRI.indexOf('//') === 0) {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n    let baseSlashAfterColonPos;\n    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n        // If there is no additional '/' after the '//'.\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n        if (baseSlashAfterColonPos < 0) {\n            // If something other than a '/' follows the '://', append the value after a '/',\n            // otherwise, prefix the value with only the baseIRI scheme.\n            if (baseIRI.length > baseColonPos + 3) {\n                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n            else {\n                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n        }\n    }\n    else {\n        // If there is not even a single '/' after the ':'\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);\n        if (baseSlashAfterColonPos < 0) {\n            // If we don't have a '/' after the ':',\n            // prefix the value with only the baseIRI scheme.\n            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n        }\n    }\n    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n    if (relativeIRI.indexOf('/') === 0) {\n        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n    }\n    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');\n    // Ignore everything after the last '/' in the baseIRI path\n    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);\n        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n        // This change is only allowed if there is something else following the path\n        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n            relativeIRI = relativeIRI.substr(1);\n        }\n    }\n    // Prefix the value with the baseIRI path where\n    relativeIRI = baseIRIPath + relativeIRI;\n    // Remove dot segment from the IRI\n    relativeIRI = removeDotSegments(relativeIRI);\n    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\nfunction removeDotSegments(path) {\n    // Prepare a buffer with segments between each '/.\n    // Each segment represents an array of characters.\n    const segmentBuffers = [];\n    let i = 0;\n    while (i < path.length) {\n        // Remove '/.' or '/..'\n        switch (path[i]) {\n            case '/':\n                if (path[i + 1] === '.') {\n                    if (path[i + 2] === '.') {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Go to parent directory,\n                        // so we remove a parent segment\n                        segmentBuffers.pop();\n                        // Ensure that we end with a slash if there is a trailing '/..'\n                        if (!path[i + 3]) {\n                            segmentBuffers.push([]);\n                        }\n                        i += 3;\n                    }\n                    else {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Ensure that we end with a slash if there is a trailing '/.'\n                        if (!path[i + 2]) {\n                            segmentBuffers.push([]);\n                        }\n                        // Go to the current directory,\n                        // so we do nothing\n                        i += 2;\n                    }\n                }\n                else {\n                    // Start a new segment\n                    segmentBuffers.push([]);\n                    i++;\n                }\n                break;\n            case '#':\n            case '?':\n                // Query and fragment string should be appended unchanged\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n                // Break the while loop\n                i = path.length;\n                break;\n            default:\n                // Not a special character, just append it to our buffer\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n                i++;\n                break;\n        }\n    }\n    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');\n}\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n    // Determine where we should start looking for the first '/' that indicates the start of the path\n    let searchOffset = colonPosition + 1;\n    if (colonPosition >= 0) {\n        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n            searchOffset = colonPosition + 3;\n        }\n    }\n    else {\n        if (iri[0] === '/' && iri[1] === '/') {\n            searchOffset = 2;\n        }\n    }\n    // Determine the path\n    const pathSeparator = iri.indexOf('/', searchOffset);\n    if (pathSeparator < 0) {\n        return iri;\n    }\n    const base = iri.substr(0, pathSeparator);\n    const path = iri.substr(pathSeparator);\n    // Remove dot segments from the path\n    return base + removeDotSegments(path);\n}\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n    return !character || character === '#' || character === '?' || character === '/';\n}\n//# sourceMappingURL=Resolve.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/BlankNode\"), exports);\n__exportStar(require(\"./lib/DataFactory\"), exports);\n__exportStar(require(\"./lib/DefaultGraph\"), exports);\n__exportStar(require(\"./lib/Literal\"), exports);\n__exportStar(require(\"./lib/NamedNode\"), exports);\n__exportStar(require(\"./lib/Quad\"), exports);\n__exportStar(require(\"./lib/Variable\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An error that includes line and column in the error message.\n */\nclass ParseError extends Error {\n    constructor(parser, message) {\n        const saxParser = parser.saxStream._parser;\n        super(parser.trackPosition ? `Line ${saxParser.line + 1} column ${saxParser.column + 1}: ${message}` : message);\n    }\n}\nexports.ParseError = ParseError;\n//# sourceMappingURL=ParseError.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./lib/Resolve\"));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}