{"version":3,"sources":["webpack:///./node_modules/@rdfjs/serializer-jsonld-ext/lib/SerializerStream.js","webpack:///./node_modules/@rdfjs/serializer-jsonld-ext/index.js","webpack:///./node_modules/@rdfjs/serializer-jsonld-ext/lib/streamConcat.js"],"names":["jsonld","Readable","streamConcat","SerializerStream","input","context","compact","flatten","frame","skipContext","skipGraphProperty","encoding","super","objectMode","read","this","on","prefix","namespace","value","handleData","quadArray","map","toJsonldQuad","rawJsonld","fromRDF","transformedJsonld","transform","options","push","err","emit","data","length","entry","Object","keys","forEach","key","JSON","stringify","quad","subject","toJsonldTerm","predicate","object","graph","term","termType","module","exports","Sink","Serializer","concatStream","stream","Promise","resolve","reject","pipe","content"],"mappings":"qGAAA,MAAMA,EAAS,EAAQ,SACjB,SAAEC,GAAa,EAAQ,QACvBC,EAAe,EAAQ,QAE7B,MAAMC,UAAyBF,EAC7B,YAAaG,GAAO,QAClBC,EAAU,GAAE,QACZC,EAAO,QACPC,EAAO,MACPC,EAAK,YACLC,EAAW,kBACXC,EAAiB,SACjBC,EAAW,UACT,IACFC,MAAM,CACJC,YAAY,EACZC,KAAM,SAGRC,KAAKV,QAAUA,EACfU,KAAKT,QAAUA,EACfS,KAAKR,QAAUA,EACfQ,KAAKP,MAAQA,EACbO,KAAKN,YAAcA,EACnBM,KAAKL,kBAAoBA,EACzBK,KAAKJ,SAAWA,EAEhBP,EAAMY,GAAG,SAAU,CAACC,EAAQC,KACrBH,KAAKV,QAAQY,KAChBF,KAAKV,QAAQY,GAAUC,EAAUC,SAIrCJ,KAAKK,WAAWhB,GAGlB,iBAAkBA,GAChB,IACE,MAAMiB,SAAmBnB,EAAaE,IAAQkB,IAAInB,EAAiBoB,cAC7DC,QAAkBxB,EAAOyB,QAAQJ,GACjCK,QAA0BX,KAAKY,UAAUH,EAAWT,KAAKa,SAE/Db,KAAKc,KAAKH,GACVX,KAAKc,KAAK,MACV,MAAOC,GACPf,KAAKgB,KAAK,QAASD,IAIvB,gBAAiBE,GAiBf,GAhBIjB,KAAKT,UACP0B,QAAahC,EAAOM,QAAQ0B,EAAMjB,KAAKV,UAGrCU,KAAKR,UACPyB,QAAahC,EAAOO,QAAQyB,EAAMjB,KAAKV,UAGrCU,KAAKP,QACPwB,QAAahC,EAAOQ,MAAMwB,EAAMjB,KAAKV,UAGnCU,KAAKN,aAAeuB,EAAK,oBACpBA,EAAK,YAGVjB,KAAKL,mBACHsB,EAAK,WAAuC,IAA1BA,EAAK,UAAUC,OAAc,CACjD,MAAMC,EAAQF,EAAK,UAAU,GAE7BG,OAAOC,KAAKF,GAAOG,QAASC,IAC1BN,EAAKM,GAAOJ,EAAMI,YAGbN,EAAK,UAIhB,MAAsB,WAAlBjB,KAAKJ,SACA4B,KAAKC,UAAUR,GAGjBA,EAGT,oBAAqBS,GACnB,MAAO,CACLC,QAASvC,EAAiBwC,aAAaF,EAAKC,SAC5CE,UAAWzC,EAAiBwC,aAAaF,EAAKG,WAC9CC,OAAQ1C,EAAiBwC,aAAaF,EAAKI,QAC3CC,MAAO3C,EAAiBwC,aAAaF,EAAKK,QAI9C,oBAAqBC,GACnB,MAAsB,cAAlBA,EAAKC,SACA,CACLA,SAAU,YACV7B,MAAO,KAAK4B,EAAK5B,OAId4B,GAIXE,EAAOC,QAAU/C,G,qBC1GjB,MAAMA,EAAmB,EAAQ,QAC3BgD,EAAO,EAAQ,QAErB,MAAMC,UAAmBD,EACvB,YAAavB,GACXhB,MAAMT,EAAkByB,IAI5BqB,EAAOC,QAAUE,G,qBCTjB,MAAMC,EAAe,EAAQ,QAE7B,SAASnD,EAAcoD,GACrB,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC3BH,EAAOtC,GAAG,QAASc,IACjB2B,EAAO3B,KAGTwB,EAAOI,KAAKL,EAAaM,IACvBH,EAAQG,QAKdV,EAAOC,QAAUhD","file":"js/chunk-40b4988c.4fcbf94b.js","sourcesContent":["const jsonld = require('jsonld')\nconst { Readable } = require('readable-stream')\nconst streamConcat = require('./streamConcat')\n\nclass SerializerStream extends Readable {\n  constructor (input, {\n    context = {},\n    compact,\n    flatten,\n    frame,\n    skipContext,\n    skipGraphProperty,\n    encoding = 'object'\n  } = {}) {\n    super({\n      objectMode: true,\n      read: () => {}\n    })\n\n    this.context = context\n    this.compact = compact\n    this.flatten = flatten\n    this.frame = frame\n    this.skipContext = skipContext\n    this.skipGraphProperty = skipGraphProperty\n    this.encoding = encoding\n\n    input.on('prefix', (prefix, namespace) => {\n      if (!this.context[prefix]) {\n        this.context[prefix] = namespace.value\n      }\n    })\n\n    this.handleData(input)\n  }\n\n  async handleData (input) {\n    try {\n      const quadArray = (await streamConcat(input)).map(SerializerStream.toJsonldQuad)\n      const rawJsonld = await jsonld.fromRDF(quadArray)\n      const transformedJsonld = await this.transform(rawJsonld, this.options)\n\n      this.push(transformedJsonld)\n      this.push(null)\n    } catch (err) {\n      this.emit('error', err)\n    }\n  }\n\n  async transform (data) {\n    if (this.compact) {\n      data = await jsonld.compact(data, this.context)\n    }\n\n    if (this.flatten) {\n      data = await jsonld.flatten(data, this.context)\n    }\n\n    if (this.frame) {\n      data = await jsonld.frame(data, this.context)\n    }\n\n    if (this.skipContext && data['@context']) {\n      delete data['@context']\n    }\n\n    if (this.skipGraphProperty) {\n      if (data['@graph'] && data['@graph'].length === 1) {\n        const entry = data['@graph'][0]\n\n        Object.keys(entry).forEach((key) => {\n          data[key] = entry[key]\n        })\n\n        delete data['@graph']\n      }\n    }\n\n    if (this.encoding === 'string') {\n      return JSON.stringify(data)\n    }\n\n    return data\n  }\n\n  static toJsonldQuad (quad) {\n    return {\n      subject: SerializerStream.toJsonldTerm(quad.subject),\n      predicate: SerializerStream.toJsonldTerm(quad.predicate),\n      object: SerializerStream.toJsonldTerm(quad.object),\n      graph: SerializerStream.toJsonldTerm(quad.graph)\n    }\n  }\n\n  static toJsonldTerm (term) {\n    if (term.termType === 'BlankNode') {\n      return {\n        termType: 'BlankNode',\n        value: `_:${term.value}`\n      }\n    }\n\n    return term\n  }\n}\n\nmodule.exports = SerializerStream\n","const SerializerStream = require('./lib/SerializerStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Serializer extends Sink {\n  constructor (options) {\n    super(SerializerStream, options)\n  }\n}\n\nmodule.exports = Serializer\n","const concatStream = require('concat-stream')\n\nfunction streamConcat (stream) {\n  return new Promise((resolve, reject) => {\n    stream.on('error', err => {\n      reject(err)\n    })\n\n    stream.pipe(concatStream(content => {\n      resolve(content)\n    }))\n  })\n}\n\nmodule.exports = streamConcat\n"],"sourceRoot":""}