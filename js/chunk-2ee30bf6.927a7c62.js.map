{"version":3,"sources":["webpack:///./node_modules/@graphy/core.iso.stream/main.js","webpack:///./node_modules/@graphy/content.nq.read/main.js"],"names":["Readable","stream","gc_readable","super","iterator","Error","s_event","b_return_stream","Promise","fk_until","fe_until","this","on","e_stream","once","a_args","s_encoding","g_readable","_readableState","objectMode","fk_bucket","fe_bucket","a_data","pipe","Writable","w_event","s_write_encoding","fk_write","push","a_chunks","fk_writev","s_data","setEncoding","decodeStrings","s_chunk","join","ab_data","Buffer","from","ab_chunk","concat","length","ds_source","w_chunk","write","end","e_read","emit","Duplex","Transform","e_destroy","z_chunk","Object","getPrototypeOf","apply","prototype","destroy","call","b_is_node","Function","B_BROWSER","B_BROWSERIFY","process","browser","versions","node","exec","version","fke_destroy","destroyed","_writableState","f_emit_close","emitClose","_destroy","e_destroy_re","nextTick","errorEmitted","QuadsToOther","gc_transform","writableObjectMode","readableObjectMode","_as_inputs","Set","ds_src","add","delete","ds_input","Quads_To_JSON_Transform","g_quad","fk_transform","JSON","stringify","isolate","Quads_To_Writable","type","value","module","exports","w_push","isBuffer","queueMicrotask","dp_resolve","resolve","fk","then","catch","e_callback","setTimeout","e_define","factory","RT_ABSOLUTE_IRI_VALID","RT_ABSOLUTE_IRI_ESCAPELESS_VALID","RT_NAMED_NODE_VALID","RT_NAMED_NODE_ESCAPELESS_VALID","R_UNICODE_ANY","F_REPLACE_UNICODE_ANY","s_","s_4","s_8","String","fromCodePoint","parseInt","R_CLEAN","R_CLEAN_COMMENTS","RT_HAS_ESCAPES","R_EOL","RT_BLANK_NODE_LABEL_VALID","RT_LANGUAGE_VALID","R_HWS","R_LANGTAG","R_IRIREF","F_REPLACE_STRLIT_CONTENTS","s_whitespace","s_auto","s_invalid","console","assert","R_STRLIT_SHORT_CONTENTS_ESCAPES_HARD","R_STRLIT_SHORT_CONTENTS_ESCAPES_SOFT","unescape_literal_short_hard","s_literal","replace","unescape_literal_short_soft","m_incomplete","R_STRLIT_ESCAPE_INCOMPLETE","i_safe","index","slice","R_STRLIT_SHORT_DOUBLE_TERM","RegExp_$lookbehind_polyfill","s_input","m_match","RegExp","i_start","mk_lookbehind_regex","e_compile","f_lookbehind","r_polyfill","f_polyfill","R_QUAD_ESCAPELESS_SP","R_QUAD","R_BLANK_NODE","NQuads_Reader","g_impls","flush","transform","_ds_input","ds_out","ds_dst","isGraphyWritable","quads_to_writable","quads_to_json","Reader","g_config","input","g_input","relax","b_relax","debug","b_debug","b_allow_relative_iris","allow_relative_iris","allowRelativeIRIs","allowRelativeIris","dc_factory","_dc_factory","adopt","dataFactory","data_factory","unfiltered","f_quad","_f_quad","quad","assign","s","prepend","n","_b_debug","_b_relax","_b_destroyed","_b_trim_start","_f_state","statement","_kt_subject","_kt_predicate","_kt_object","_s_literal","_kt_default_graph","defaultGraph","_kt_rdfs_lang_string","namedNode","r_clean","_r_clean","relaxed","warn","stack","ds_transform","blankNode","languagedLiteral","rt_named_node_valid","rt_named_node_valid_escapeless","k_self","create_named_node","create_named_node_escapeless","create_blank_node","create_languaged_literal","p_iri","test","_error","s_label","s_contents","s_language","b_init","fk_chunk","lastIndex","m_clean","emit_comments","i","parse","fk_flush","demolish","substr","name","_f_data_quad","kt_subject","kt_predicate","kt_object","kt_graph","s_captured","a_comments","split","s_comment","bind","string","TypeError","_graphy_reader","s_message","error","comment","read","progress","eof","finish","data","f_sync","f_data_quad","simpleLiteral","datatypedLiteral","kt_default_graph","m_statement_e_sp","b_graph_late","p_object","s_subject","z_bail","strlit_contents","kt_datatype","toLowerCase","s_graph","s_predicate","m_statement","m_term","i_term","s_dirty","datatype_or_langtag","s_clean","s_incomplete","max_token_length","parse_error","eos","x","m_langtag","post_object","graph","m_iriref","p_datatype","i_stop","indexOf","statement_term","m_blank","s_state","z_arg_0","pipeTo","toString"],"mappings":"sGAAA,sBAAe,EAAQ,QAIvB,MAAMA,UAAiBC,EAAOD,SAC7B,YAAYE,EAAY,IAIvB,GAHAC,MAAMD,GAGHA,EAAYE,SACd,MAAM,IAAIC,MAAM,yDAIlB,MAAMC,EAASC,GACd,OAAO,IAAIC,QAAQ,CAACC,EAAUC,KAE7BC,KAAKC,GAAG,QAAUC,IACjBH,EAASG,KAIPN,EACFI,KAAKG,KAAKR,EAAS,IAAIS,KACtBN,EAASE,QAASI,KAInBJ,KAAKG,KAAKR,EAASG,KAKtB,OAAOO,EAAW,QACjB,IAAIC,EAAaN,KAAKO,eAGtB,OAAGD,EAAWE,WAEN,IAAIX,QAAQ,CAACY,EAAWC,KAC9B,IAAIC,EAAS,GAGbX,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7B,MAAMC,EAASC,EAAkBC,GAChCL,EAAOM,KAAKH,GACZE,KAGD,OAAOE,EAAUC,GAChBR,EAAOM,QAAQC,GACfC,QAIAlB,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUE,OAKN,SAAWN,GAAc,UAAYA,EAErC,IAAIR,QAAQ,CAACY,EAAWC,KAC9B,IAAIU,EAAS,GAGbpB,KAAKqB,YAAYhB,GAGjBL,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7BS,eAAe,EAEf,MAAMC,EAASR,EAAkBC,GAChCI,GAAUG,EACVP,KAGD,OAAOE,EAAUC,GAChBC,GAAUF,EAASM,KAAK,IACxBL,QAIAlB,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUW,OAKN,WAAaf,EAEb,IAAIR,QAAQ,CAACY,EAAWC,KAC9B,IAAIe,EAAUC,EAAOC,KAAK,IAG1B3B,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7BS,eAAe,EAEf,MAAMM,EAAUb,EAAkBC,GACjCS,EAAUC,EAAOG,OAAO,CAACJ,EAASG,GAAWH,EAAQK,OAAOF,EAASE,QACrEd,QAIAf,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUgB,YApBT,GA2BP,MAAMZ,UAAiBvB,EAAOuB,SAC7B,MAAMlB,EAASC,GACd,OAAO,IAAIC,QAAQ,CAACC,EAAUC,KAE7BC,KAAKC,GAAG,QAAUC,IACjBH,EAASG,KAIPN,EACFI,KAAKG,KAAKR,EAAS,IAAIS,KACtBN,EAASE,QAASI,KAInBJ,KAAKG,KAAKR,EAASG,KAMtB,OAAOiC,GAMN,OALAA,EACE9B,GAAG,OAAQ+B,GAAWhC,KAAKiC,MAAMD,IACjC/B,GAAG,MAAO,IAAMD,KAAKkC,OACrBjC,GAAG,QAASkC,GAAUnC,KAAKoC,KAAK,QAASD,IAEpCnC,MAIT,MAAMqC,UAAe/C,EAAO+C,OAC3B,MAAM1C,EAASC,GACd,OAAO,IAAIC,QAAQ,CAACC,EAAUC,KAE7BC,KAAKC,GAAG,QAAUC,IACjBH,EAASG,KAIPN,EACFI,KAAKG,KAAKR,EAAS,IAAIS,KACtBN,EAASE,QAASI,KAInBJ,KAAKG,KAAKR,EAASG,KAKtB,OAAOO,EAAW,QACjB,IAAIC,EAAaN,KAAKO,eAGtB,OAAGD,EAAWE,WAEN,IAAIX,QAAQ,CAACY,EAAWC,KAC9B,IAAIC,EAAS,GAGbX,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7B,MAAMC,EAASC,EAAkBC,GAChCL,EAAOM,KAAKH,GACZE,KAGD,OAAOE,EAAUC,GAChBR,EAAOM,QAAQC,GACfC,QAIAlB,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUE,OAKN,SAAWN,GAAc,UAAYA,EAErC,IAAIR,QAAQ,CAACY,EAAWC,KAC9B,IAAIU,EAAS,GAGbpB,KAAKqB,YAAYhB,GAGjBL,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7BS,eAAe,EAEf,MAAMC,EAASR,EAAkBC,GAChCI,GAAUG,EACVP,KAGD,OAAOE,EAAUC,GAChBC,GAAUF,EAASM,KAAK,IACxBL,QAIAlB,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUW,OAKN,WAAaf,EAEb,IAAIR,QAAQ,CAACY,EAAWC,KAC9B,IAAIe,EAAUC,EAAOC,KAAK,IAG1B3B,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7BS,eAAe,EAEf,MAAMM,EAAUb,EAAkBC,GACjCS,EAAUC,EAAOG,OAAO,CAACJ,EAASG,GAAWH,EAAQK,OAAOF,EAASE,QACrEd,QAIAf,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUgB,YApBT,GA2BP,MAAMa,UAAkBhD,EAAOgD,UAC9B,MAAM3C,EAASC,GACd,OAAO,IAAIC,QAAQ,CAACC,EAAUC,KAE7BC,KAAKC,GAAG,QAAUC,IACjBH,EAASG,KAIPN,EACFI,KAAKG,KAAKR,EAAS,IAAIS,KACtBN,EAASE,QAASI,KAInBJ,KAAKG,KAAKR,EAASG,KAKtB,OAAOO,EAAW,QACjB,IAAIC,EAAaN,KAAKO,eAGtB,OAAGD,EAAWE,WAEN,IAAIX,QAAQ,CAACY,EAAWC,KAC9B,IAAIC,EAAS,GAGbX,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7B,MAAMC,EAASC,EAAkBC,GAChCL,EAAOM,KAAKH,GACZE,KAGD,OAAOE,EAAUC,GAChBR,EAAOM,QAAQC,GACfC,QAIAlB,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUE,OAKN,SAAWN,GAAc,UAAYA,EAErC,IAAIR,QAAQ,CAACY,EAAWC,KAC9B,IAAIU,EAAS,GAGbpB,KAAKqB,YAAYhB,GAGjBL,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7BS,eAAe,EAEf,MAAMC,EAASR,EAAkBC,GAChCI,GAAUG,EACVP,KAGD,OAAOE,EAAUC,GAChBC,GAAUF,EAASM,KAAK,IACxBL,QAIAlB,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUW,OAKN,WAAaf,EAEb,IAAIR,QAAQ,CAACY,EAAWC,KAC9B,IAAIe,EAAUC,EAAOC,KAAK,IAG1B3B,KAAKY,KAAK,IAAItB,EAAOuB,SAAS,CAC7BS,eAAe,EAEf,MAAMM,EAAUb,EAAkBC,GACjCS,EAAUC,EAAOG,OAAO,CAACJ,EAASG,GAAWH,EAAQK,OAAOF,EAASE,QACrEd,QAIAf,GAAG,QAAUC,IACbQ,EAAUR,KAGVD,GAAG,SAAU,KACbQ,EAAUgB,YApBT,EA2BN,OAAOM,GAMN,OALAA,EACE9B,GAAG,OAAQ+B,GAAWhC,KAAKiC,MAAMD,IACjC/B,GAAG,MAAO,IAAMD,KAAKkC,OACrBjC,GAAG,QAASkC,GAAUnC,KAAKoC,KAAK,QAASD,IAEpCnC,KAGR,SAASuC,GAkBR,GAhBAvC,KAAKiB,KAAQuB,IAEZ,GAAG,OAASA,EAGZ,MAAM,IAAI9C,MAAM,mEAIjBM,KAAKoC,KAAO,SAASzC,KAAYS,GAC7B,QAAUT,GAEb8C,OAAOC,eAAe1C,MAAMoC,KAAKO,MAAM3C,KAAM,CAACL,KAAYS,KAIxDmC,EACF,OAAOjD,EAAOgD,UAAUM,UAAUC,QAAQC,KAAK9C,KAAMuC,IAMxD,MAAMQ,EAAY,IAAKC,SAA0B,qDAA/B,IAGXC,EAAWC,GAAgB,KAAO,qBAAuBC,EAC7D,EAAC,GAAM,GACNA,EAAQC,QACR,EAAC,GAAM,GACN,cAAgBD,EAAQE,UAAY,cAAgBF,EAAQE,SAASC,KACrE,EAAC,GAAM,GACP,EAAC,GAAO,GANqB,IAS/BJ,GAAiBH,IAAgB,UAAUQ,KAAKJ,EAAQK,SAAS,GAAO,MAE1ElB,EAAUM,UAAUC,QAAUR,EAAOO,UAAUC,QAAU,SAASN,EAAWkB,GAC5EzD,KAAKO,eAAemD,WAAY,EAChC1D,KAAK2D,eAAeD,WAAY,EAEhC,IAAIE,EAAe,KACd5D,KAAK2D,eAAeE,WACpB7D,KAAKO,eAAesD,WACxB7D,KAAKoC,KAAK,UAiBX,OAdApC,KAAK8D,SAASvB,GAAa,KAAOwB,KAC7BN,GAAeM,GAClBZ,EAAQa,SAAS,KAChBhE,KAAKoC,KAAK,QAAS2B,GACnBH,MAED5D,KAAK2D,eAAeM,cAAe,IAGnCd,EAAQa,SAASJ,GACdH,GAAaA,EAAYM,MAIvB/D,MAIRsC,EAAUM,UAAUkB,SAAWzB,EAAOO,UAAUkB,SAAW,CAACvB,EAAWkB,IAAgBA,EAAYlB,IAGpG,MAAM2B,UAAqB5B,EAC1B,YAAY6B,EAAa,IACxB3E,MAAM,IACF2E,EACHC,oBAAoB,EACpBC,oBAAoB,IAGrBrE,KAAKsE,WAAa,IAAIC,IAGtBvE,KAAKC,GAAG,OAASuE,IAChBxE,KAAKsE,WAAWG,IAAID,GAEpBA,EACEvE,GAAG,SAAU,IAAIG,KACjBJ,KAAKoC,KAAK,YAAahC,KAEvBH,GAAG,UAAW,IAAIG,KAClBJ,KAAKoC,KAAK,aAAchC,OAI3BJ,KAAKC,GAAG,SAAWuE,IAClBxE,KAAKsE,WAAWI,OAAOF,KAIzB,WACC,IAAI,IAAIG,KAAY3E,KAAKsE,WACxBK,EAAS9B,WAKZ,MAAM+B,UAAgCV,EAErC,WAAWW,EAAQxE,EAAYyE,GAC9BA,EAAa,KAAMC,KAAKC,UAAUH,EAAOI,WAAW,OAItD,MAAMC,UAA0BhB,EAC/B,WAAWW,EAAQxE,EAAYyE,GAC9BA,EAAa,KAAM,CAClBK,KAAM,OACNC,MAAOP,KAKVvC,EAAU4B,aAAeA,EAEzBmB,EAAOC,QAAU,IACbhG,EACHD,WACAwB,WACAwB,SACAC,YAEA4B,eAGA,gBACC,OAAO,IAAIU,GAIZ,oBACC,OAAO,IAAIM,GAIZ,OAAOK,EAAQlF,EAAW,MAKzB,OAHIA,GAAc,kBAAoBkF,IAAQlF,EAAa,QAGpD,IAAIhB,EAAS,CACnBmB,YAAaH,GAAc,kBAAoBkF,IAAW7D,EAAO8D,SAASD,GAE1E,OACCvF,KAAKiB,KAAKsE,EAAQlF,GAClBL,KAAKiB,KAAK,a,4DCxhBb,GAAG,oBAAsBwE,eAAgB,CAExC,IAAIC,EAAa7F,QAAQ8F,UAGzB,IAECF,eAAiBG,GAAMF,EAAWG,KAAKD,GACrCE,MAAMC,GAAcC,WAAW,KAC/B,MAAMD,GACJ,IAGL,MAAME,KAMR,MAAM3G,EAAS,EAAQ,QACjB4G,EAAU,EAAQ,QAElBC,EAAwB,qFACxBC,EAAmC,2CACnCC,EAAsB,gEACtBC,EAAiC,0BAEjCC,EAAgB,2CAEhBC,EAAyB,CAACC,EAAIC,EAAKC,IAAQC,OAAOC,cAAcC,SAASJ,GAAOC,EAAK,KAGrFI,EAAU,2BACVC,EAAmB,yBACnBC,EAAiB,OACjBC,EAAQ,YAGRC,EAA4B,urBAC5BC,EAAoB,wBAGpBC,EAAQ,UACRC,EAAY,wDAEZC,EAAW,gBAIXC,EAA4B,CAACf,EAAIgB,EAAcC,EAAQhB,EAAKC,EAAKgB,KACtE,GAAGF,EACF,OAAOA,GACN,IAAK,IAAK,MAAO,KACjB,IAAK,IAAK,MAAO,KACjB,IAAK,IAAK,MAAO,KACjB,IAAK,IAAK,MAAO,KACjB,IAAK,IAAK,MAAO,KACjB,QACCG,QAAQC,OAAO,mCAAmCJ,UAIhD,IAAGC,EACP,OAAOA,EAEH,GAAGhB,EACP,OAAOE,OAAOC,cAAcC,SAASJ,EAAK,KAEtC,GAAGC,EACP,OAAOC,OAAOC,cAAcC,SAASH,EAAK,KAEtC,GAAGgB,EAEP,KAAG,OAASA,EAAU,GAIf,IAAIjI,MAAM,yEAAyEiI,qCAInF,IAAIjI,MAAM,6EAA6EqF,KAAKC,UAAU2C,qCAI7GC,QAAQC,OAAO,oEAKXC,EAAuC,iFACvCC,EAAuC,yGAEvCC,EAA8BC,GAAaA,EAC/CC,QAAQJ,EAAsCN,GAE1CW,EAA+BF,IACpC,IAAIG,EAAeC,EAA2B9E,KAAK0E,GAGnD,GAAGG,EAAc,CAChB,IAAIE,EAASF,EAAaG,MAG1B,MAAO,CACNN,EAAUO,MAAM,EAAGF,GACjBJ,QAAQH,EAAsCP,GAChDS,EAAUO,MAAMF,IAKjB,MAAO,CACNL,EACEC,QAAQH,EAAsCP,GAChD,MAOFa,EACAI,GACG,MACH,SAASC,EAA4BC,GACpC,IAAIC,EAAUC,OAAOjG,UAAUW,KAAKT,KAAK9C,KAAM2I,GAE/C,GAAGC,EAAS,CACX,IAAIE,EAAUF,EAAQ,GAAG9G,OAAS8G,EAAQ,GAAG9G,OAC7C8G,EAAQL,OAASO,EACjBF,EAAQ,GAAKA,EAAQ,GAAGJ,MAAMM,GAG/B,OAAOF,EAER,IAAIG,EAAsB,MACzB,IACC,IAAIF,OAAO,WAEZ,MAAMG,GACL,MAAO,CAACC,EAAcC,EAAYC,KACjCD,EAAW3F,KAAO4F,EACXD,GAGT,OAAOD,GAAgBA,KAVE,GAY1B,MAAO,CAENF,EACC,IAAM,IAAIF,OAAO,kFACjB,oEACA,SAAuCF,GACtC,IAAIC,EAAUC,OAAOjG,UAAUW,KAAKT,KAAK9C,KAAM2I,GAK/C,OAJGC,IACFA,EAAQL,OAASK,EAAQ,GAAG9G,OAAS8G,EAAQ,GAAG9G,QAG1C8G,KAITG,EACC,IAAM,IAAIF,OAAO,2CAA4C,KAC7D,yBACAH,KA1CC,GAkDEU,EAAuB,iTACvBC,EAAS,6SACTC,EAAe,mBAIrB,MAAMC,UAAsBjK,EAAOgD,UAClC,YAAYkH,GACXhK,MAAM,CAEL8B,eAAe,EAGf8C,oBAAoB,EAGpBC,oBAAoB,EAGpBoF,MAAOD,EAAQC,MACfC,UAAWF,EAAQE,YAIpB1J,KAAKC,GAAG,OAAS0E,IAChB3E,KAAK2J,UAAYhF,EAGd,oBAAsBA,EAAStD,aACjCsD,EAAStD,YAAY,UAMxB,KAAKuI,GACJ,IAAIC,EAASD,EAcb,OAXIC,EAAOlG,eAAenD,WAKlBoJ,EAAOE,mBAEdF,EAAStK,EAAOyK,qBALhBH,EAAStK,EAAO0K,gBASdJ,IAAWC,GAEbrK,MAAMoB,KAAKgJ,GAGJA,EAAOhJ,KAAKiJ,IAIZrK,MAAMoB,KAAKiJ,IAKrB,MAAMI,EACL,YAAYC,GACX,IAECC,MAAOC,EAAQ,KAGfC,MAAOC,GAAQ,EAGfC,MAAOC,GAAQ,GACZN,EAGAO,EAAwBP,EAASQ,qBAAuBR,EAASS,mBAAqBT,EAASU,oBAAqB,EAGpHC,EAAa7K,KAAK8K,YAAc5E,EAAQ6E,MAAMb,EAASc,aAAed,EAASe,cAAgB/E,EAAQgF,YAEvGC,EAASnL,KAAKoL,QAAUP,EAAWQ,KAGvC5I,OAAO6I,OAAOtL,KAAM,CAEnBuL,EAAGrB,EAASsB,SAAW,GAGvBC,EAAG,EAEHC,SAAUlB,EAEVmB,SAAUrB,EAEVsB,cAAc,EAEdC,eAAe,EAEfC,SAAU9L,KAAK+L,UAEfC,YAAa,KACbC,cAAe,KACfC,WAAY,KAEZC,WAAY,KAGbnM,KAAKoM,kBAAoBvB,EAAWwB,eACpCrM,KAAKsM,qBAAuBzB,EAAW0B,UAAU,yDAGjD,IAAIC,EAAUxM,KAAKyM,SAAW1F,EAE3BmD,EAASwC,SACX9E,QAAQ+E,KAAK,IAAKjN,MAAM,oDAAqDkN,MAAM1E,QAAQ,UAAW,aAEpG,aAAcgC,GAChBtC,QAAQ+E,KAAK,IAAKjN,MAAM,iIAAkIkN,MAAM1E,QAAQ,UAAW,aAGpL,IAgDI2E,EAhDAN,EAAY1B,EAAW0B,UACvBO,EAAYjC,EAAWiC,UACvBC,EAAmBlC,EAAWkC,iBAG9BC,EAAsBvC,EAAuBpE,EAAqBF,EAGlE8G,EAAiCxC,EAAuBnE,EAAgCF,EAGxF8G,EAASlN,KACbyC,OAAO6I,OAAOtL,KAAOsK,EAyBlB,CACD6C,kBAAmBZ,EAEnBa,6BAA8Bb,EAE9Bc,kBAAmBP,EAEnBQ,yBAA0BP,GA/BzB,CACD,kBAAkBQ,GACjB,OAAIP,EAAoBQ,KAAKD,GACtBhB,EAAUgB,GAD2BL,EAAOO,OAAO,iBAAiBF,OAI5E,6BAA6BA,GAC5B,OAAIN,EAA+BO,KAAKD,GACjChB,EAAUgB,GADsCL,EAAOO,OAAO,iBAAiBF,OAIvF,kBAAkBG,GACjB,OAAIvG,EAA0BqG,KAAKE,GAC5BZ,EAAUY,GADmCR,EAAOO,OAAO,8BAA8BC,OAIjG,yBAAyBC,EAAYC,GACpC,OAAIxG,EAAkBoG,KAAKI,GAIpBb,EAAiBY,EAAYC,GAH5BV,EAAOO,OAAO,iCAAiCG,MAoB1D,IAAIC,GAAS,EA2Ib,GAxIAhB,EAAe7M,KAAK0J,UAAY,IAAIH,EAAc,CAEjDG,UAAW,CAACnI,EAASlB,EAAYyN,KAE5BD,IAEHhB,EAAazK,KAAK,SAGlByL,GAAS,GAIV,IAAItC,EAAIvL,KAAKuL,GAAKhK,EAGlB,GAAGvB,KAAK6L,cAAe,CACtBW,EAAQuB,UAAY,EACpB,IAAIC,EAAUxB,EAAQjJ,KAAKgI,GACxBvL,KAAKiO,eACPjO,KAAKiO,cAAcD,EAAQ,IAI5BhO,KAAKkO,EAAI1B,EAAQuB,eAIjB/N,KAAKkO,EAAI,EAIVlO,KAAKyL,EAAIF,EAAEzJ,OAGX,IACC9B,KAAKmO,OAAM,GAGZ,MAAMhM,GACL,OAAO0K,EAAahK,QAAQV,GAI7B0K,EAAazK,KAAK,WAAYb,EAAQO,QAGtCgM,KAIDrE,MAAQ2E,IAEP,GAAGpO,KAAKuL,EAAEzJ,OAAQ,CAKjB,GAHA9B,KAAKuL,GAAK,KAGPvL,KAAK6L,cAAe,CACtBW,EAAQuB,UAAY,EACpB,IAAIC,EAAUxB,EAAQjJ,KAAKvD,KAAKuL,GAC7BvL,KAAKiO,eACPjO,KAAKiO,cAAcD,EAAQ,IAI5BhO,KAAKkO,EAAI1B,EAAQuB,eAIjB/N,KAAKkO,EAAI,EAIV,IACClO,KAAKmO,QAGN,MAAMhM,GAEL,OAAO0K,EAAawB,SAASlM,GAI9B,GAAGnC,KAAKuL,EAAEzJ,OACT,OAAO+K,EAAawB,SAAS,IAAI3O,MAAM,iDAAiDM,KAAKuL,EAAE+C,OAAO,EAAG,2BAK3G,GAAGtO,KAAK8L,WAAa9L,KAAK+L,UACzB,OAAOc,EAAawB,SAAS,IAAI3O,MAAM,oCAAoCM,KAAK8L,SAASyC,WAAWvO,KAAKuL,EAAE+C,OAAO,EAAG,2BAItHtO,KAAKuL,EAAI,KAGTsB,EAAazK,KAAK,WAAY,GAG9ByK,EAAazK,KAAK,OAGlBgM,OAKFvB,EAAa/I,SAAW,IAAI1D,KAC3BJ,KAAK6C,WAAWzC,IAIjBJ,KAAKwO,aAAe,CAACC,EAAYC,EAAcC,EAAWC,IAAa/B,EAAa5L,KAAKkK,EAAOsD,EAAYC,EAAcC,EAAWC,IAGrI/B,EAAa5M,GAAG,cAAgBN,IAE5B,YAAcA,IAChB6M,EAAUxF,EACVhH,KAAKiO,cAAiBY,IACrB,IAAIA,EAAY,OAChB,IAAIC,EAAaD,EAAWrG,MAAM,GAAGN,QAAQ,SAAU,IAAI6G,MAAM,YAEjE,IAAI,IAAIC,KAAaF,EACpBjC,EAAazK,KAAK,UAAW4M,OAOjChP,KAAKiP,KAAK/E,GAGPE,EAEF,GAAGA,EAAQ9K,OAAQ,CAClB,IAAIqF,EAAWyF,EAAQ9K,OAGvBmG,eAAe,KACdd,EAAS/D,KAAKiM,SAIX,IAAG,kBAAoBzC,EAAQ8E,OAUnC,MAAM,IAAIC,UAAU,0CAAyC,kBAAoB/E,EAASrF,KAAKC,UAAUoF,GAAUA,IAVxE,CAC3C,IAAIzB,EAAUyB,EAAQ8E,OAGtBzJ,eAAe,KACdoH,EAAa3K,IAAIyG,EAAS,WAS7BkE,EAAauC,eAAiBpP,KAG/B,OAAOqP,GAEN,MADArP,KAAK4L,cAAe,EACd,IAAIlM,MAAM2P,GAKjB,KAAKnF,GACJ,IAAI2C,EAAe7M,KAAK0J,UACrBQ,EAASoF,OAAOzC,EAAa5M,GAAG,QAASiK,EAASoF,OAClDpF,EAASqF,SAAS1C,EAAa5M,GAAG,UAAWiK,EAASqF,SACtDrF,EAASsF,MAAM3C,EAAa1M,KAAK,OAAQ+J,EAASsF,MAClDtF,EAASuF,UAAU5C,EAAa5M,GAAG,WAAYiK,EAASuF,UACxDvF,EAASwF,KAAK7C,EAAa1M,KAAK,MAAO+J,EAASwF,KAChDxF,EAAShI,KAAK2K,EAAa1M,KAAK,MAAO+J,EAAShI,KAChDgI,EAASyF,QAAQ9C,EAAa1M,KAAK,SAAU+J,EAASyF,QACtDzF,EAAS0F,MAAM/C,EAAa5M,GAAG,OAAQiK,EAAS0F,MAIpD,QACC,IAAIC,EAAS7P,KAAK8L,WAClB,MAAM,oBAAsB+D,EAC3BA,EAASA,EAAOlN,MAAM3C,MAIxB,YACC,IAAIuL,EAAIvL,KAAKuL,EAET2C,GADIlO,KAAKyL,EACLzL,KAAKkO,GACT4B,EAAc9P,KAAKwO,aACnBrB,EAAoBnN,KAAKmN,kBACzBC,EAA+BpN,KAAKoN,6BACpCE,EAA2BtN,KAAKsN,yBAChCD,EAAoBrN,KAAKqN,kBACzB0C,EAAgB/P,KAAK8K,YAAYiF,cACjCC,EAAmBhQ,KAAK8K,YAAYkF,iBACpCC,EAAmBjQ,KAAKoM,kBAG5B,OAAQ,CAEPhD,EAAqB2E,UAAYG,EAEjC,IAAIgC,EAAmB9G,EAAqB7F,KAAKgI,GAGjD,GAAG2E,EAAkB,CAKpB,IAAIvB,EAHJT,EAAI9E,EAAqB2E,UAKzB,IAAIoC,GAAe,EAGnB,GAAGD,EAAiB,GAAI,CACvB,IAAIE,EAAWF,EAAiB,GAAG1H,MAAM,GACzCmG,EAAYvB,EAA6BgD,QAGrC,GAAGF,EAAiB,GACxBvB,EAAYtB,EAAkB6C,EAAiB,QAG3C,CAEJC,GAAe,EAGf,IAAIxC,EAAauC,EAAiB,GAElC,IAAGA,EAAiB,IAqBf,CAEJlQ,KAAKmM,WAAawB,EAElB3N,KAAKkO,EAAIA,EAET,CACC,IAAImC,EAAYH,EAAiB,GAGhClQ,KAAKgM,YADHqE,GAAa,kBAAoBA,EAChBjD,EAA6BiD,GAI7BhD,EAAkB6C,EAAiB,IAIxDlQ,KAAKiM,cAAgBmB,EAA6B8C,EAAiB,IAEnE,IAAII,EAAStQ,KAAKuQ,kBAElB,GAAGD,GAAUtQ,KAAK+L,YAAcuE,EAC/B,OAAOA,EAGH,CAEJ,IAAI9D,EAAUxM,KAAKyM,SACnBD,EAAQuB,UAAY/N,KAAKkO,EACzB,IAAIF,EAAUxB,EAAQjJ,KAAKgI,GACxBvL,KAAKiO,eACPjO,KAAKiO,cAAcD,EAAQ,IAG5BE,EAAI1B,EAAQuB,UAEZ,UAxDD,GAAGmC,EAAiB,IAAK,CAExB,IAAIM,EAAcxQ,KAAKoN,6BAA6B8C,EAAiB,KAErEvB,EAAYqB,EAAiBrC,EAAY6C,QAGrC,GAAGN,EAAiB,IAAK,CAE7B,IAAItC,EAAasC,EAAiB,IAAIO,cAEtC9B,EAAYrB,EAAyBK,EAAYC,QAIjDe,EAAYoB,EAAcpC,GA6C7B,IA+BIc,EA/BAG,EAAWqB,EAGf,GAAGE,EAAc,CAEhB,IAAIO,EAAUR,EAAiB,IAG5BQ,GAAW,kBAAoBA,EACjC9B,EAAWxB,EAA6BsD,GAGjCR,EAAiB,MACxBtB,EAAWvB,EAAkB6C,EAAiB,UAI3C,CAEJ,IAAIQ,EAAUR,EAAiB,GAG5BQ,GAAW,kBAAoBA,EACjC9B,EAAWxB,EAA6BsD,GAGjCR,EAAiB,KACxBtB,EAAWvB,EAAkB6C,EAAiB,KAKhD,CACC,IAAIG,EAAYH,EAAiB,GAGhCzB,EADE4B,GAAa,kBAAoBA,EACtBjD,EAA6BiD,GAI7BhD,EAAkB6C,EAAiB,IAGlD,IAAIS,EAAcT,EAAiB,GAEnCJ,EACCrB,EACArB,EAA6BuD,GAC7BhC,EACAC,GAGE5O,KAAKiO,eACPjO,KAAKiO,cAAciC,EAAiB,IAAMA,EAAiB,SAGxD,CAEJ7G,EAAO0E,UAAYG,EAEnB,IAAI0C,EAAcvH,EAAO9F,KAAKgI,GAG9B,GAAGqF,EAAa,CAKf,IAAIjC,EAHJT,EAAI7E,EAAO0E,UAKX,IAAIoC,GAAe,EAGnB,GAAGS,EAAY,GAAI,CAClB,IAAIR,EAAWQ,EAAY,GAAGpI,MAAM,GACpCmG,EAAYxB,EAAkBlG,EAAeuG,KAAK4C,GAAWA,EAASlI,QAAQ3B,EAAeC,GAAwB4J,QAGjH,GAAGQ,EAAY,GACnBjC,EAAYtB,EAAkBpG,EAAeuG,KAAKoD,EAAY,IAAKA,EAAY,GAAG1I,QAAQ3B,EAAeC,GAAwBoK,EAAY,QAGzI,CAEJT,GAAe,EAGf,IAAIxC,EAAaiD,EAAY,GAE7B,IAAGA,EAAY,IAwBV,CAEJ5Q,KAAKmM,WAAawB,EAElB3N,KAAKkO,EAAIA,EAET,CACC,IAAImC,EAAYO,EAAY,GAG3B5Q,KAAKgM,YADHqE,GAAa,kBAAoBA,EAChBlD,EAAkBlG,EAAeuG,KAAK6C,GAAYA,EAAUnI,QAAQ3B,EAAeC,GAAwB6J,GAI3GhD,EAAkBuD,EAAY,IAInD5Q,KAAKiM,cAAgBkB,EAAkBlG,EAAeuG,KAAKoD,EAAY,IAAKA,EAAY,GAAG1I,QAAQ3B,EAAeC,GAAwBoK,EAAY,IAEtJ,IAAIN,EAAStQ,KAAKuQ,kBAElB,GAAGD,GAAUtQ,KAAK+L,YAAcuE,EAC/B,OAAOA,EAGH,CAEJ,IAAI9D,EAAUxM,KAAKyM,SACnBD,EAAQuB,UAAY/N,KAAKkO,EACzB,IAAIF,EAAUxB,EAAQjJ,KAAKgI,GACxBvL,KAAKiO,eACPjO,KAAKiO,cAAcD,EAAQ,IAG5BE,EAAI1B,EAAQuB,UAEZ,UAxDD,GAHAJ,EAAa3F,EAA4B2F,GAGtCiD,EAAY,IAAK,CAEnB,IAAIJ,EAAcxQ,KAAKmN,kBAAkByD,EAAY,KAErDjC,EAAYqB,EAAiBrC,EAAY6C,QAGrC,GAAGI,EAAY,IAAK,CAExB,IAAIhD,EAAagD,EAAY,IAAIH,cAEjC9B,EAAYrB,EAAyBK,EAAYC,QAIjDe,EAAYoB,EAAcpC,GA6C7B,IA+BIc,EA/BAG,EAAWqB,EAGf,GAAGE,EAAc,CAEhB,IAAIO,EAAUE,EAAY,IAGvBF,GAAW,kBAAoBA,EACjC9B,EAAWzB,EAAkBlG,EAAeuG,KAAKkD,GAAUA,EAAQxI,QAAQ3B,EAAeC,GAAwBkK,GAG3GE,EAAY,MACnBhC,EAAWvB,EAAkBuD,EAAY,UAItC,CAEJ,IAAIF,EAAUE,EAAY,GAGvBF,GAAW,kBAAoBA,EACjC9B,EAAWzB,EAAkBlG,EAAeuG,KAAKkD,GAAUA,EAAQxI,QAAQ3B,EAAeC,GAAwBkK,GAG3GE,EAAY,KACnBhC,EAAWvB,EAAkBuD,EAAY,KAK3C,CACC,IAAIP,EAAYO,EAAY,GAG3BnC,EADE4B,GAAa,kBAAoBA,EACtBlD,EAAkBlG,EAAeuG,KAAK6C,GAAYA,EAAUnI,QAAQ3B,EAAeC,GAAwB6J,GAI3GhD,EAAkBuD,EAAY,IAG7C,IAAID,EAAcC,EAAY,GAE9Bd,EACCrB,EACAtB,EAAkBlG,EAAeuG,KAAKmD,GAAcA,EAAYzI,QAAQ3B,EAAeC,GAAwBmK,GAC/GhC,EACAC,GAGE5O,KAAKiO,eACPjO,KAAKiO,cAAc2C,EAAY,IAAMA,EAAY,SAG9C,CAIJ,GAFA1J,EAAM6G,UAAYG,GAEfhH,EAAM3D,KAAKgI,GASb,MAPA2C,EAAIhH,EAAM6G,UACV/N,KAAKyN,OAAO,gCAAgClC,EAAE+C,OAAOJ,EAAG,IAAIhG,QAAQ,MAAO,oCAmB/E,OANAlI,KAAKuL,EAAIA,EAAE+C,OAAOJ,GAGlBlO,KAAK8L,SAAW9L,KAAK+L,UAGd,EAIR,kBACC,IAAI,EAACR,EAAC,EAAEE,EAAC,EAAEyC,GAAKlO,KAGhByI,EAA2BsF,UAAYG,EACvC,IAAI2C,EAASpI,EAA2BlF,KAAKgI,GAG7C,GAAGsF,EAAQ,CAEV,IAAIC,EAASD,EAAOtI,MAGhBwI,EAAUxF,EAAE/C,MAAM0F,EAAG4C,GAYzB,OATA9Q,KAAKmM,YAAcnE,EAA4B+I,GAG/C/Q,KAAKkO,EAAI4C,EAASD,EAAO,GAAG/O,OAG5B9B,KAAK6L,eAAgB,EAGd7L,KAAKgR,uBAAyBhR,KAAK+L,UAGtC,CAEJ,IAAIgF,EAAUxF,EAAE/C,MAAM0F,IAGjB+C,EAASC,GAAgB/I,EAA4B4I,GAG1D/Q,KAAKmM,YAAc8E,EAGnBjR,KAAKkO,EAAIA,EAAIzC,EAAIyF,EAAapP,OAG9B9B,KAAK6L,eAAgB,EAItB,OAAGqC,EAAIlO,KAAKyL,GAER,IAAMyC,GAELlO,KAAKyL,EAAIzL,KAAKmR,iBACTnR,KAAKoR,YAAY,oBAM3BpR,KAAK8L,SAAW9L,KAAKuQ,gBAGrBvQ,KAAKuL,EAAIA,EAAE/C,MAAM0F,GAGdlO,KAAKqR,KAAKrR,KAAKqR,MACX,GAMR,sBAEC,IAAI,EAAC9F,EAAC,EAAEE,EAAC,EAAEyC,GAAKlO,KAGZsR,EAAI/F,EAAE2C,GAEV,MAAMA,EAAIzC,EAAG,CAEZ,GAAG,MAAQ6F,EA+CN,IAAG,MAAQA,EAAG,CAElBhK,EAAUyG,UAAYG,EAEtB,IAAIqD,EAAYjK,EAAU/D,KAAKgI,GAG/B,GAAGgG,EAWF,OATAvR,KAAKkO,EAAI5G,EAAUyG,UAGnB/N,KAAKkM,WAAalM,KAAK8K,YAAYiC,iBAAiB/M,KAAKmM,WAAYoF,EAAU,IAG/EvR,KAAKmM,WAAa,GAGXnM,KAAKwR,cAIZ,MAIG,GAAG,MAAQF,GAAK,MAAQA,EAQ5B,OANAtR,KAAKkM,WAAalM,KAAK8K,YAAYiF,cAAc/P,KAAKmM,YAGtDnM,KAAKmM,WAAa,GAGXnM,KAAKyR,QAGR,GAAG,MAAQH,EAAG,CAElB,IAAI3C,EAAY3O,KAAK8K,YAAYiF,cAAc/P,KAAKmM,YAYpD,OATAnM,KAAKmM,WAAa,GAGlBnM,KAAKkO,EAAIA,EAAI,EAGblO,KAAKwO,aAAaxO,KAAKgM,YAAahM,KAAKiM,cAAe0C,EAAW3O,KAAKoM,mBAGjEpM,KAAK+L,UAYZ,MA5GA,KAAImC,EAAE,EAAKzC,GAyCV,MAvCA,GAAG,MAAQF,EAAE2C,EAAE,GAAI,CAElB3G,EAASwG,UAAYG,EAAI,EAGzB,IAAIwD,EAAWnK,EAAShE,KAAKgI,GAG7B,GAAGmG,EAAU,CAEZ1R,KAAKkO,EAAI3G,EAASwG,UAGlB,IAAI4D,EAAaD,EAAS,GAAGxJ,QAAQ3B,EAAeC,GAGhDgK,EAAcxQ,KAAKmN,kBAAkBwE,GASzC,OANA3R,KAAKkM,WAAalM,KAAK8K,YAAYkF,iBAAiBhQ,KAAKmM,WAAYqE,GAGrExQ,KAAKmM,WAAa,GAGXnM,KAAKwR,cAIZ,MAKDxR,KAAKyN,OAAO,0CAA0ClC,EAAE+C,OAAOJ,EAAE,EAAG,IAAIhG,QAAQ,MAAO,kCAiF3F,OAHAlI,KAAKkO,EAAIA,EAGNA,EAAIlO,KAAKyL,GAER,IAAMyC,GAELlO,KAAKyL,EAAIzL,KAAKmR,iBACTnR,KAAKoR,YAAY,wBAM3BpR,KAAK8L,SAAW9L,KAAKgR,oBAGrBhR,KAAKuL,EAAIA,EAAE/C,MAAM0F,GAGdlO,KAAKqR,KAAKrR,KAAKqR,MACX,GAGR,iBACC,IAAI,EAAC9F,EAAC,EAAEE,EAAC,EAAEyC,GAAKlO,KAGZ4R,EAASrG,EAAEsG,QAAQ,IAAK3D,GAG5B,OAAG0D,GAAU,GAEZ5R,KAAK6L,eAAgB,EAGrB7L,KAAKkO,EAAI0D,EAAS,EAGX5R,KAAK+L,YAGJ,QAAQyB,KAAKjC,EAAE/C,MAAM0F,KAC7BlO,KAAKoR,YAAY,kBAIlBpR,KAAK6L,eAAgB,EAGrB7L,KAAK8L,SAAW9L,KAAK8R,eAGrB9R,KAAKuL,EAAIA,EAAE/C,MAAM0F,GAGdlO,KAAKqR,KAAKrR,KAAKqR,MACX,GAGR,cACC,IAAI,EAAC9F,EAAC,EAAEE,EAAC,EAAEyC,GAAKlO,KAQhB,GALAqH,EAAM0G,UAAYG,EAClB7G,EAAM9D,KAAKgI,GACX2C,EAAI7G,EAAM0G,UAGPG,GAAKzC,EASP,OAPAzL,KAAK8L,SAAW9L,KAAKwR,YAGrBxR,KAAKuL,EAAIA,EAAE/C,MAAM0F,GAGdlO,KAAKqR,KAAKrR,KAAKqR,MACX,EAIR,OAAO9F,EAAE2C,IAER,IAAK,IAQJ,OANAlO,KAAKkO,EAAIA,EAAI,EAGblO,KAAKwO,aAAaxO,KAAKgM,YAAahM,KAAKiM,cAAejM,KAAKkM,WAAYlM,KAAKoM,mBAGvEpM,KAAK+L,UAIb,IAAK,IACL,IAAK,IAKJ,OAHA/L,KAAKkO,EAAIA,EAGFlO,KAAKyR,QAIb,QAECzR,KAAKkO,EAAIA,EAGTlO,KAAKoR,YAAY,gBAKpB,QACC,IAAI,EAAC7F,EAAC,EAAEE,EAAC,EAAEyC,GAAKlO,KAIhBuH,EAASwG,UAAYG,EAErB,IAAIwD,EAAWnK,EAAShE,KAAKgI,GAG7B,GAAGmG,EAAU,CAEZ1R,KAAKkO,EAAI3G,EAASwG,UAElB,IAAIa,EAAW5O,KAAKmN,kBAAkBuE,EAAS,IAM/C,OAHA1R,KAAKwO,aAAaxO,KAAKgM,YAAahM,KAAKiM,cAAejM,KAAKkM,WAAY0C,GAGlE5O,KAAK8R,iBAER,CAEJxI,EAAayE,UAAYG,EAEzB,IAAI6D,EAAUzI,EAAa/F,KAAKgI,GAGhC,GAAGwG,EAAS,CAEX/R,KAAKkO,EAAI5E,EAAayE,UAEtB,IAAIa,EAAW5O,KAAK8K,YAAYgC,UAAUiF,EAAQ,IAMlD,OAHA/R,KAAKwO,aAAaxO,KAAKgM,YAAahM,KAAKiM,cAAejM,KAAKkM,WAAY0C,GAGlE5O,KAAK8R,kBAad,OAPA9R,KAAK8L,SAAW9L,KAAKyR,MAGrBzR,KAAKuL,EAAIA,EAAE/C,MAAM0F,GAGdlO,KAAKqR,KAAKrR,KAAKqR,MACX,EAGR,YAAYW,GACX,OAAOhS,KAAKyN,OAAO,kBAAkBuE,SAAehS,KAAKuL,EAAE+C,OAAOtO,KAAKkO,EAAG,IAAIhG,QAAQ,MAAO,kCAG9F,QAAQ3F,GACPvC,KAAKwO,aAAe,QAEhBjM,GAAavC,KAAK2J,WACrB3J,KAAK2J,UAAU9G,QAAQN,GAGxBvC,KAAK0J,UAAU2E,SAAS9L,IAK1B8C,EAAOC,QAAU,YAAYlF,GAC5B,IAAI8J,EAAW,GAGf,GAAG9J,EAAO0B,OAAQ,CACjB,IAAImQ,EAAU7R,EAAO,GAQrB,GALG6R,GAAWA,EAAQ9H,OAAS,qBAAuB8H,EAAQ9H,MAAM+E,SAAW+C,EAAQ9H,MAAM7K,SAC5F2S,EAAUA,EAAQ9H,OAIhB,kBAAoB8H,EACtB/H,EAASC,MAAQ,CAAC+E,OAAO+C,QAGrB,GAAG,OAASA,EAChB/H,EAASC,MAAQ,UAGb,GAAG,oBAAsB8H,EAAQ5Q,YACrC6I,EAASC,MAAQ,CAAC7K,OAAO2S,OAGrB,IAAG,oBAAsBA,EAAQC,OACrC,MAAM,IAAI/C,UAAU,wDAIhB,IAAG8C,GAAW,kBAAoBA,GAAW,oBAAsBxP,OAAOG,UAAUuP,SAASrP,KAAKmP,GAUtG,MAAM,IAAI9C,UAAU,0BAA0B8C,GAN9C,GAHA/H,EAAW+H,EAGR7R,EAAO0B,OAAS,EAClB,MAAM,IAAIqN,UAAU,+CAA+C/O,EAAOoI,MAAM,IASlF,GAAGpI,EAAO0B,OAAS,IAElBW,OAAO6I,OAAOpB,EAAU9J,EAAO,IAG5BA,EAAO0B,OAAS,GAClB,MAAM,IAAIqN,UAAU,yDAAyD/O,EAAOoI,MAAM,IAM7F,OAAO,IAAKyB,EAAOC,GAAWR","file":"js/chunk-2ee30bf6.927a7c62.js","sourcesContent":["const stream = require('readable-stream');\n\n\n\nclass Readable extends stream.Readable {\n\tconstructor(gc_readable={}) {\n\t\tsuper(gc_readable);\n\n\t\t// use iterator\n\t\tif(gc_readable.iterator) {\n\t\t\tthrow new Error('readable stream iterator shortcut not yet implemented');\n\t\t}\n\t}\n\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass Writable extends stream.Writable {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\t// rdfjs impl\n\timport(ds_source) {\n\t\tds_source\n\t\t\t.on('data', w_chunk => this.write(w_chunk))\n\t\t\t.on('end', () => this.end())\n\t\t\t.on('error', e_read => this.emit('error', e_read));\n\n\t\treturn this;\n\t}\n}\n\nclass Duplex extends stream.Duplex {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass Transform extends stream.Transform {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t// rdfjs impl\n\timport(ds_source) {\n\t\tds_source\n\t\t\t.on('data', w_chunk => this.write(w_chunk))\n\t\t\t.on('end', () => this.end())\n\t\t\t.on('error', e_read => this.emit('error', e_read));\n\n\t\treturn this;\n\t}\n\n\tdemolish(e_destroy) {\n\t\t// do not allow to push\n\t\tthis.push = (z_chunk) => {\n\t\t\t// ignore eof signals from node core\n\t\t\tif(null === z_chunk) return;\n\n\t\t\t// anything else is bad\n\t\t\tthrow new Error(`[ERR_STREAM_DESTROYED]: Cannot push after stream was destroyed`);\n\t\t};\n\n\t\t// do not allow to emit 'end'\n\t\tthis.emit = function(s_event, ...a_args) {\n\t\t\tif('end' === s_event) return;\n\n\t\t\tObject.getPrototypeOf(this).emit.apply(this, [s_event, ...a_args]);\n\t\t};\n\n\t\t// an error was given, destroy the stream as well\n\t\tif(e_destroy) {\n\t\t\treturn stream.Transform.prototype.destroy.call(this, e_destroy);\n\t\t}\n\t}\n}\n\n// eslint-disable-next-line no-new-func\nconst b_is_node = (new Function(/* syntax: js */ `try {return this===global;}catch(e){return false;}`))();\n\n// deduce the runtime environment\nconst [B_BROWSER, B_BROWSERIFY] = (() => 'undefined' === typeof process\n\t? [true, false]\n\t: (process.browser\n\t\t? [true, true]\n\t\t: ('undefined' === process.versions || 'undefined' === process.versions.node\n\t\t\t? [true, false]\n\t\t\t: [false, false])))();\n\n// node.js or browserify; patch for node < v10\nif(B_BROWSERIFY || (b_is_node && (+(/^v(\\d+)/.exec(process.version)[1])) < 10)) {\n\t// override destroy methods\n\tTransform.prototype.destroy = Duplex.prototype.destroy = function(e_destroy, fke_destroy) {\n\t\tthis._readableState.destroyed = true;\n\t\tthis._writableState.destroyed = true;\n\n\t\tlet f_emit_close = () => {\n\t\t\tif(!this._writableState.emitClose) return;\n\t\t\tif(!this._readableState.emitClose) return;\n\t\t\tthis.emit('close');\n\t\t};\n\n\t\tthis._destroy(e_destroy || null, (e_destroy_re) => {\n\t\t\tif(!fke_destroy && e_destroy_re) {\n\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\tthis.emit('error', e_destroy_re);\n\t\t\t\t\tf_emit_close();\n\t\t\t\t});\n\t\t\t\tthis._writableState.errorEmitted = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocess.nextTick(f_emit_close);\n\t\t\t\tif(fke_destroy) fke_destroy(e_destroy_re);\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t};\n\n\t// override default _destroy implementations\n\tTransform.prototype._destroy = Duplex.prototype._destroy = (e_destroy, fke_destroy) => fke_destroy(e_destroy);\n}\n\nclass QuadsToOther extends Transform {\n\tconstructor(gc_transform={}) {\n\t\tsuper({\n\t\t\t...gc_transform,\n\t\t\twritableObjectMode: true,\n\t\t\treadableObjectMode: true,\n\t\t});\n\n\t\tthis._as_inputs = new Set();\n\n\t\t// forward prefix and comment events\n\t\tthis.on('pipe', (ds_src) => {\n\t\t\tthis._as_inputs.add(ds_src);\n\n\t\t\tds_src\n\t\t\t\t.on('prefix', (...a_args) => {\n\t\t\t\t\tthis.emit('prefix', ...a_args);\n\t\t\t\t})\n\t\t\t\t.on('comment', (...a_args) => {\n\t\t\t\t\tthis.emit('comment', ...a_args);\n\t\t\t\t});\n\t\t});\n\n\t\tthis.on('unpipe', (ds_src) => {\n\t\t\tthis._as_inputs.delete(ds_src);\n\t\t});\n\t}\n\n\t_destroy() {\n\t\tfor(let ds_input of this._as_inputs) {\n\t\t\tds_input.destroy();\n\t\t}\n\t}\n}\n\nclass Quads_To_JSON_Transform extends QuadsToOther {\n\t// serializse json\n\t_transform(g_quad, s_encoding, fk_transform) {\n\t\tfk_transform(null, JSON.stringify(g_quad.isolate())+'\\n');\n\t}\n}\n\nclass Quads_To_Writable extends QuadsToOther {\n\t_transform(g_quad, s_encoding, fk_transform) {\n\t\tfk_transform(null, {\n\t\t\ttype: 'quad',\n\t\t\tvalue: g_quad,\n\t\t});\n\t}\n}\n\nTransform.QuadsToOther = QuadsToOther;\n\nmodule.exports = {\n\t...stream,\n\tReadable,\n\tWritable,\n\tDuplex,\n\tTransform,\n\n\tQuadsToOther,\n\n\t// create a transform from quad objects into JSON strings for trivial serialization\n\tquads_to_json() {\n\t\treturn new Quads_To_JSON_Transform();\n\t},\n\n\t// create a transform from quad objects into writable data events\n\tquads_to_writable() {\n\t\treturn new Quads_To_Writable();\n\t},\n\n\t// create a simple, single-event readable stream\n\tsource(w_push, s_encoding=null) {\n\t\t// encoding not explicit, string given; assume utf8\n\t\tif(!s_encoding && 'string' === typeof w_push) s_encoding = 'utf8';\n\n\t\t// readable\n\t\treturn new Readable({\n\t\t\tobjectMode: !s_encoding && 'string' !== typeof w_push && !Buffer.isBuffer(w_push),\n\n\t\t\tread() {\n\t\t\t\tthis.push(w_push, s_encoding);\n\t\t\t\tthis.push(null);\n\t\t\t},\n\t\t});\n\t},\n};\n","\n\n\n// queueMicrotask shim\n{\n\t// not defined or not a function\n\tif('function' !== typeof queueMicrotask) {\n\t\t// create resolved promise\n\t\tlet dp_resolve = Promise.resolve();\n\n\t\t// try to redefine\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tqueueMicrotask = fk => dp_resolve.then(fk)\n\t\t\t\t.catch(e_callback => setTimeout(() => {\n\t\t\t\t\tthrow e_callback;\n\t\t\t\t}, 0));\n\t\t}\n\t\t// oh well, at least we tried\n\t\tcatch(e_define) {}\n\t}\n}\n\n\n\nconst stream = require('@graphy/core.iso.stream');\nconst factory = require('@graphy/core.data.factory');\n\nconst RT_ABSOLUTE_IRI_VALID = /^[a-z][a-z0-9+\\-.]*:(?:[^\\0-\\x20<>\"{}|^`\\\\]|\\\\u[A-Fa-f0-9]{4}|\\\\U[A-Fa-f0-9]{8})*$/;\nconst RT_ABSOLUTE_IRI_ESCAPELESS_VALID = /^[a-z][a-z0-9+\\-.]*:[^\\0-\\x20<>\"{}|^`]*$/;\nconst RT_NAMED_NODE_VALID = /^([^\\0-\\x20<>\"{}|^`\\\\]|\\\\u[A-Fa-f0-9]{4}|\\\\U[A-Fa-f0-9]{8})*$/;\nconst RT_NAMED_NODE_ESCAPELESS_VALID = /^([^\\0-\\x20<>\"{}|^`])*$/;\n\nconst R_UNICODE_ANY = /\\\\u([0-9A-Fa-f]{4})|\\\\U([0-9A-Fa-f]{8})/g;\n\nconst F_REPLACE_UNICODE_ANY = \t(s_, s_4, s_8) => String.fromCodePoint(parseInt(s_4 || s_8, 16));\n\n\nconst R_CLEAN = /\\s*(?:#[^\\n]*\\n\\s*)*\\s*/y;\nconst R_CLEAN_COMMENTS = /\\s*(#[^\\n]*\\n\\s*)*\\s*/y;\nconst RT_HAS_ESCAPES = /[\\\\]/;\nconst R_EOL = /[^\\n]+\\n/y;\n\n// eslint-disable-next-line no-misleading-character-class\nconst RT_BLANK_NODE_LABEL_VALID = /^(?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_0-9])(?:(?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_\\-0-9\\xb7\\u{0300}-\\u{036f}\\u{203f}-\\u{2040}.])*[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u{02ff}\\u{0370}-\\u{037d}\\u{037f}-\\u{1fff}\\u{200c}-\\u{200d}\\u{2070}-\\u{218f}\\u{2c00}-\\u{2fef}\\u{3001}-\\u{d7ff}\\u{f900}-\\u{fdcf}\\u{fdf0}-\\u{fffd}\\u{10000}-\\u{effff}_\\-0-9\\xb7\\u{0300}-\\u{036f}\\u{203f}-\\u{2040}])?$/u;\nconst RT_LANGUAGE_VALID = /^[a-z]+(-[a-z0-9]+)*$/;\n\nconst R_WS = /\\s*/y;\nconst R_HWS = /[ \\t]*/y;\nconst R_LANGTAG = /@([A-Za-z]+(?:-[A-Za-z0-9-]+)*)(?:\\s+|(?=[.,;\\])#]))/y;\n\nconst R_IRIREF = /<([^>]*)>\\s*/y;\n\n\n\nconst F_REPLACE_STRLIT_CONTENTS = (s_, s_whitespace, s_auto, s_4, s_8, s_invalid) => {\n\tif(s_whitespace) {\n\t\tswitch(s_whitespace) {\n\t\t\tcase 't': return '\\t';\n\t\t\tcase 'n': return '\\n';\n\t\t\tcase 'r': return '\\r';\n\t\t\tcase 'f': return '\\f';\n\t\t\tcase 'b': return '\\b';\n\t\t\tdefault: {\n\t\t\t\tconsole.assert(`bad regex escape char mapping: '${s_whitespace}'`);\n\t\t\t}\n\t\t}\n\t}\n\telse if(s_auto) {\n\t\treturn s_auto;\n\t}\n\telse if(s_4) {\n\t\treturn String.fromCodePoint(parseInt(s_4, 16));\n\t}\n\telse if(s_8) {\n\t\treturn String.fromCodePoint(parseInt(s_8, 16));\n\t}\n\telse if(s_invalid) {\n\t\t// pointless escape\n\t\tif('\\\\' === s_invalid[0]) {\n\t\t\t\t// // relaxed\n\t\t\t\t// return s_invalid[1];\n\t\t\t// if relaxed then return s_invalid, otherwise throw:\n\t\t\tthrow new Error(`expected string_literal but invalid escape sequence within contents: '${s_invalid}'. failed to parse a valid token`);\n\t\t}\n\t\t// bad character\n\t\telse {\n\t\t\tthrow new Error(`expected string_literal but invalid whitespace character within contents: ${JSON.stringify(s_invalid)}. failed to parse a valid token`);\n\t\t}\n\t}\n\telse {\n\t\tconsole.assert(`unexpected no match branch in escape sequence replace callback`);\n\t}\n};\n\n\nconst R_STRLIT_SHORT_CONTENTS_ESCAPES_HARD = /(?:\\\\(?:([tnrfb])|([\\\\\"'])|u([0-9A-Fa-f]{4})|U([0-9A-Fa-f]{8}))|([\\r\\n]|\\\\.))/g;\nconst R_STRLIT_SHORT_CONTENTS_ESCAPES_SOFT = /(?:\\\\(?:([tnrfb])|([\\\\\"'])|u([0-9A-Fa-f]{4})|U([0-9A-Fa-f]{8}))|([\\r\\n]|\\\\[^uU]|\\\\u[^]{4}|\\\\U[^]{8}))/g;\n\nconst unescape_literal_short_hard = s_literal => s_literal\n\t.replace(R_STRLIT_SHORT_CONTENTS_ESCAPES_HARD, F_REPLACE_STRLIT_CONTENTS);\n\nconst unescape_literal_short_soft = (s_literal) => {\n\tlet m_incomplete = R_STRLIT_ESCAPE_INCOMPLETE.exec(s_literal);\n\n\t// incomplete escape\n\tif(m_incomplete) {\n\t\tlet i_safe = m_incomplete.index;\n\n\t\t// rewind\n\t\treturn [\n\t\t\ts_literal.slice(0, i_safe)\n\t\t\t\t.replace(R_STRLIT_SHORT_CONTENTS_ESCAPES_SOFT, F_REPLACE_STRLIT_CONTENTS),\n\t\t\ts_literal.slice(i_safe),\n\t\t];\n\t}\n\t// done\n\telse {\n\t\treturn [\n\t\t\ts_literal\n\t\t\t\t.replace(R_STRLIT_SHORT_CONTENTS_ESCAPES_SOFT, F_REPLACE_STRLIT_CONTENTS),\n\t\t\t'',\n\t\t];\n\t}\n};\n\n// lookbehind regexes\nconst [\n\tR_STRLIT_ESCAPE_INCOMPLETE,\n\tR_STRLIT_SHORT_DOUBLE_TERM,\n] = (() => {\n\tfunction RegExp_$lookbehind_polyfill(s_input) {\n\t\tlet m_match = RegExp.prototype.exec.call(this, s_input);\n\n\t\tif(m_match) {\n\t\t\tlet i_start = m_match[0].length - m_match[1].length;\n\t\t\tm_match.index += i_start;\n\t\t\tm_match[0] = m_match[0].slice(i_start);\n\t\t}\n\n\t\treturn m_match;\n\t}\n\tlet mk_lookbehind_regex = (() => {\n\t\ttry {\n\t\t\tnew RegExp('(?<!h)i');  // eslint-disable-line no-new\n\t\t}\n\t\tcatch(e_compile) {\n\t\t\treturn (f_lookbehind, r_polyfill, f_polyfill) => {\n\t\t\t\tr_polyfill.exec = f_polyfill;\n\t\t\t\treturn r_polyfill;\n\t\t\t};\n\t\t}\n\t\treturn f_lookbehind => f_lookbehind();\n\t})();\n\treturn [\n\t\t// R_STRLIT_ESCAPE_INCOMPLETE\n\t\tmk_lookbehind_regex(\n\t\t\t() => new RegExp('(?<!(?:[^\\\\\\\\]|^)(?:\\\\\\\\\\\\\\\\)*\\\\\\\\)\\\\\\\\(|u[0-9A-Fa-f]{0,3}|U[0-9A-Fa-f]{0,7})$'),\n\t\t\t/^(?:(?:[^\\\\]|\\\\.)*)(\\\\(?:|u[0-9A-Fa-f]{0,3}|U[0-9A-Fa-f]{0,7}))$/,\n\t\t\tfunction RegExp_$lookbehind_polyfill_n(s_input) {\n\t\t\t\tlet m_match = RegExp.prototype.exec.call(this, s_input);\n\t\t\t\tif(m_match) {\n\t\t\t\t\tm_match.index += m_match[0].length - m_match[1].length;\n\t\t\t\t}\n\n\t\t\t\treturn m_match;\n\t\t\t},\n\t\t),\n\t\t// R_STRLIT_SHORT_DOUBLE_TERM\n\t\tmk_lookbehind_regex(\n\t\t\t() => new RegExp('(?<!(?:[^\\\\\\\\]|^)(?:\\\\\\\\\\\\\\\\)*\\\\\\\\)\"\\\\s*', 'g'),\n\t\t\t/(?:[^\\\\\"]|\\\\.)*(\"\\s*)/y,\n\t\t\tRegExp_$lookbehind_polyfill,\n\t\t),\n\n\t];\n})();\n\n\n\nconst R_QUAD_ESCAPELESS_SP = /(?:<([^\\\\>]*)>|_:([^\\x20\\t<]+))[\\x20\\t]*<([^\\\\>]*)>[\\x20\\t]*(?:(?:(<[^\\\\>]*)>|_:([^\\x20\\t<]+))[\\x20\\t]*(?:<([^\\\\>]*)>|_:([^\\x20\\t<]+)|)[\\x20\\t]*\\.\\s*(#[^\\n]*\\n\\s*|\\n\\s*)+|\"([^\"\\\\]*)(?:(\")(?:\\^\\^<([^\\\\>]*)>|@([^\\x20\\t.]+)|)[\\x20\\t]*(?:<([^\\\\>]*)>|_:([^\\x20\\t<]+)|)[\\x20\\t]*\\.\\s*(#[^\\n]*\\n\\s*|\\n\\s*)+)?)/y;\nconst R_QUAD = /(?:<([^>]*)>|_:([^\\x20\\t<]+))[\\x20\\t]*<([^>]*)>[\\x20\\t]*(?:(?:(<[^>]*)>|_:([^\\x20\\t<]+))[\\x20\\t]*(?:<([^>]*)>|_:([^\\x20\\t<]+)|)[\\x20\\t]*\\.\\s*(#[^\\n]*\\n\\s*|\\n\\s*)+|\"((?:[^\"\\\\]|\\\\.)*)(?:(\")(?:\\^\\^<([^>]*)>|@([^\\x20\\t.]+)|)[\\x20\\t]*(?:<([^>]*)>|_:([^\\x20\\t<]+)|)[\\x20\\t]*\\.\\s*(#[^\\n]*\\n\\s*|\\n\\s*)+)?)/y;\nconst R_BLANK_NODE = /_:([^\\x20\\t<]+)/y;\n\n\n\nclass NQuads_Reader extends stream.Transform {\n\tconstructor(g_impls) {\n\t\tsuper({\n\t\t\t// do not decode strings into buffers\n\t\t\tdecodeStrings: false,\n\n\t\t\t// accept strings as input on writable side\n\t\t\twritableObjectMode: false,\n\n\t\t\t// output quad objects on readable side\n\t\t\treadableObjectMode: true,\n\n\t\t\t// implementations\n\t\t\tflush: g_impls.flush,\n\t\t\ttransform: g_impls.transform,\n\t\t});\n\n\t\t// when the writable side is piped into\n\t\tthis.on('pipe', (ds_input) => {\n\t\t\tthis._ds_input = ds_input;\n\n\t\t\t// input stream has encoding option; ensure stream encoding is utf8\n\t\t\tif('function' === typeof ds_input.setEncoding) {\n\t\t\t\tds_input.setEncoding('utf8');\n\t\t\t}\n\t\t});\n\t}\n\n\t// intercept pipe\n\tpipe(ds_out) {\n\t\tlet ds_dst = ds_out;\n\n\t\t// non-object mode\n\t\tif(!ds_dst._writableState.objectMode) {\n\t\t\t// transform to JSON\n\t\t\tds_out = stream.quads_to_json();\n\t\t}\n\t\t// yet object mode and graphy writable\n\t\telse if(ds_out.isGraphyWritable) {\n\t\t\t// transform to quad-stream\n\t\t\tds_out = stream.quads_to_writable();\n\t\t}\n\n\t\t// interim stream created\n\t\tif(ds_out !== ds_dst) {\n\t\t\t// forward output to super\n\t\t\tsuper.pipe(ds_out);\n\n\t\t\t// pipe outpu to destination\n\t\t\treturn ds_out.pipe(ds_dst);\n\t\t}\n\t\t// forward as-is to super\n\t\telse {\n\t\t\treturn super.pipe(ds_dst);\n\t\t}\n\t}\n}\n\nclass Reader {\n\tconstructor(g_config) {\n\t\tlet {\n\t\t\t// input medium\n\t\t\tinput: g_input=null,\n\n\t\t\t// relax validation\n\t\t\trelax: b_relax=false,\n\n\t\t\t// debug\n\t\t\tdebug: b_debug=false,\n\t\t} = g_config;\n\n\t\t// allow relative iris flag\n\t\tlet b_allow_relative_iris = g_config.allow_relative_iris || g_config.allowRelativeIRIs || g_config.allowRelativeIris || false;\n\n\t\t// adopt factory\n\t\tlet dc_factory = this._dc_factory = factory.adopt(g_config.dataFactory || g_config.data_factory || factory.unfiltered);\n\n\t\tlet f_quad = this._f_quad = dc_factory.quad;\n\n\t\t// fields\n\t\tObject.assign(this, {\n\t\t\t// string buffer, accept left-over string from previous data chunk\n\t\t\ts: g_config.prepend || '',\n\n\t\t\t// string buffer length\n\t\t\tn: 0,\n\n\t\t\t_b_debug: b_debug,\n\n\t\t\t_b_relax: b_relax,\n\n\t\t\t_b_destroyed: false,\n\n\t\t\t_b_trim_start: true,\n\n\t\t\t_f_state: this.statement,\n\n\t\t\t_kt_subject: null,\n\t\t\t_kt_predicate: null,\n\t\t\t_kt_object: null,\n\n\t\t\t_s_literal: '',\n\t\t});\n\n\t\tthis._kt_default_graph = dc_factory.defaultGraph();\n\t\tthis._kt_rdfs_lang_string = dc_factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\n\n\t\t// clean regex\n\t\tlet r_clean = this._r_clean = R_CLEAN;\n\n\t\tif(g_config.relaxed) {\n\t\t\tconsole.warn((new Error(`no such option 'relaxed'; did you mean 'relax' ?`)).stack.replace(/^Error:/, 'Warning:'));\n\t\t}\n\t\tif('validate' in g_config) {\n\t\t\tconsole.warn((new Error(`option 'validate' has been removed and validation is now on by default. Use 'relax' option if you wish to disable validation.`)).stack.replace(/^Error:/, 'Warning:'));\n\t\t}\n\n\t\tlet namedNode = dc_factory.namedNode;\n\t\tlet blankNode = dc_factory.blankNode;\n\t\tlet languagedLiteral = dc_factory.languagedLiteral;\n\n\t\t// test for valid named node\n\t\tlet rt_named_node_valid = b_allow_relative_iris? RT_NAMED_NODE_VALID: RT_ABSOLUTE_IRI_VALID;\n\n\t\t// test for valid named node escapeless\n\t\tlet rt_named_node_valid_escapeless = b_allow_relative_iris? RT_NAMED_NODE_ESCAPELESS_VALID: RT_ABSOLUTE_IRI_ESCAPELESS_VALID;\n\n\t\t// validation\n\t\tlet k_self = this;\n\t\tObject.assign(this, !b_relax\n\t\t\t? {\n\t\t\t\tcreate_named_node(p_iri) {\n\t\t\t\t\tif(!rt_named_node_valid.test(p_iri)) return k_self._error(`invalid IRI: \"${p_iri}\"`);\n\t\t\t\t\treturn namedNode(p_iri);\n\t\t\t\t},\n\n\t\t\t\tcreate_named_node_escapeless(p_iri) {\n\t\t\t\t\tif(!rt_named_node_valid_escapeless.test(p_iri)) return k_self._error(`invalid IRI: \"${p_iri}\"`);\n\t\t\t\t\treturn namedNode(p_iri);\n\t\t\t\t},\n\n\t\t\t\tcreate_blank_node(s_label) {\n\t\t\t\t\tif(!RT_BLANK_NODE_LABEL_VALID.test(s_label)) return k_self._error(`Invalid blank node label: \"${s_label}\"`);\n\t\t\t\t\treturn blankNode(s_label);\n\t\t\t\t},\n\n\t\t\t\tcreate_languaged_literal(s_contents, s_language) {\n\t\t\t\t\tif(!RT_LANGUAGE_VALID.test(s_language)) {\n\t\t\t\t\t\treturn k_self._error(`Invalid literal language tag: ${s_language}`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn languagedLiteral(s_contents, s_language);\n\t\t\t\t},\n\t\t\t}\n\t\t\t: {\n\t\t\t\tcreate_named_node: namedNode,\n\n\t\t\t\tcreate_named_node_escapeless: namedNode,\n\n\t\t\t\tcreate_blank_node: blankNode,\n\n\t\t\t\tcreate_languaged_literal: languagedLiteral,\n\t\t\t});\n\n\t\t// transform stream\n\t\tlet ds_transform;\n\n\t\t// whether or not data has been received before\n\t\tlet b_init = false;\n\n\t\t// create transform\n\t\tds_transform = this.transform = new NQuads_Reader({\n\t\t\t// on data event\n\t\t\ttransform: (s_chunk, s_encoding, fk_chunk) => {\n\t\t\t\t// first transform\n\t\t\t\tif(!b_init) {\n\t\t\t\t\t// notify that data will begin\n\t\t\t\t\tds_transform.emit('ready');\n\n\t\t\t\t\t// do not emit 'ready' event again\n\t\t\t\t\tb_init = false;\n\t\t\t\t}\n\n\t\t\t\t// concatenate current chunk to previous chunk\n\t\t\t\tlet s = this.s += s_chunk;\n\n\t\t\t\t// remove whitespace & comments from beginning\n\t\t\t\tif(this._b_trim_start) {\n\t\t\t\t\tr_clean.lastIndex = 0;\n\t\t\t\t\tlet m_clean = r_clean.exec(s);\n\t\t\t\t\tif(this.emit_comments) {\n\t\t\t\t\t\tthis.emit_comments(m_clean[1]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// update index and prepare to match statement\n\t\t\t\t\tthis.i = r_clean.lastIndex;\n\t\t\t\t}\n\t\t\t\t// do not remove whitespace; reset index\n\t\t\t\telse {\n\t\t\t\t\tthis.i = 0;\n\t\t\t\t}\n\n\t\t\t\t// cache chunk length\n\t\t\t\tthis.n = s.length;\n\n\t\t\t\t// resume parsing\n\t\t\t\ttry {\n\t\t\t\t\tthis.parse(true);\n\t\t\t\t}\n\t\t\t\t// read error occurred; emit and destroy stream\n\t\t\t\tcatch(e_read) {\n\t\t\t\t\treturn ds_transform.destroy(e_read);\n\t\t\t\t}\n\n\t\t\t\t// emit progress event updates\n\t\t\t\tds_transform.emit('progress', s_chunk.length);\n\n\t\t\t\t// done transforming this chunk\n\t\t\t\tfk_chunk();\n\t\t\t},\n\n\t\t\t// once there's no more data to consume, invoke eof\n\t\t\tflush: (fk_flush) => {\n\t\t\t\t// there is still unparsed data\n\t\t\t\tif(this.s.length) {\n\t\t\t\t\t// append newline to end so we can match token\n\t\t\t\t\tthis.s += '\\n';\n\n\t\t\t\t\t// remove whitespace & comments from beginning\n\t\t\t\t\tif(this._b_trim_start) {\n\t\t\t\t\t\tr_clean.lastIndex = 0;\n\t\t\t\t\t\tlet m_clean = r_clean.exec(this.s);\n\t\t\t\t\t\tif(this.emit_comments) {\n\t\t\t\t\t\t\tthis.emit_comments(m_clean[1]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// update index and prepare to match statement\n\t\t\t\t\t\tthis.i = r_clean.lastIndex;\n\t\t\t\t\t}\n\t\t\t\t\t// do not remove whitespace; reset index\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.i = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// parse\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.parse();\n\t\t\t\t\t}\n\t\t\t\t\t// read error occurred; pass to flush errback and exit method\n\t\t\t\t\tcatch(e_read) {\n\t\t\t\t\t\t// destroying during flush means overriding push\n\t\t\t\t\t\treturn ds_transform.demolish(e_read);\n\t\t\t\t\t}\n\n\t\t\t\t\t// still unparsed characters; pass to flush errback and exit method\n\t\t\t\t\tif(this.s.length) {\n\t\t\t\t\t\treturn ds_transform.demolish(new Error(`parsing error occurred in state: statement\\n  ${this.s.substr(0, 50)}\\n  ^ starting here`));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// invalid state\n\t\t\t\tif(this._f_state !== this.statement) {\n\t\t\t\t\treturn ds_transform.demolish(new Error(`parsing error occurred in state: ${this._f_state.name}\\n  ${this.s.substr(0, 50)}\\n  ^ starting here`));\n\t\t\t\t}\n\n\t\t\t\t// make buffer's alloc eligible for gc\n\t\t\t\tthis.s = null;\n\n\t\t\t\t// final progress update: no additional bytes were read\n\t\t\t\tds_transform.emit('progress', 0);\n\n\t\t\t\t// call end event listener\n\t\t\t\tds_transform.emit('eof');\n\n\t\t\t\t// done flushing, close read stream\n\t\t\t\tfk_flush();\n\t\t\t},\n\t\t});\n\n\t\t// destroy\n\t\tds_transform._destroy = (...a_args) => {\n\t\t\tthis.destroy(...a_args);\n\t\t};\n\n\t\t// data quad\n\t\tthis._f_data_quad = (kt_subject, kt_predicate, kt_object, kt_graph) => ds_transform.push(f_quad(kt_subject, kt_predicate, kt_object, kt_graph));\n\n\t\t// new listener added\n\t\tds_transform.on('newListener', (s_event) => {\n\t\t\t// comment\n\t\t\tif('comment' === s_event) {\n\t\t\t\tr_clean = R_CLEAN_COMMENTS;\n\t\t\t\tthis.emit_comments = (s_captured) => {\n\t\t\t\t\tif(!s_captured) return;\n\t\t\t\t\tlet a_comments = s_captured.slice(1).replace(/\\n\\s+$/, '').split(/\\n+\\s*#/g);\n\n\t\t\t\t\tfor(let s_comment of a_comments) {\n\t\t\t\t\t\tds_transform.emit('comment', s_comment);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\t// bind events to transform stream\n\t\tthis.bind(g_config);\n\n\t\t// input given\n\t\tif(g_input) {\n\t\t\t// input is stream\n\t\t\tif(g_input.stream) {\n\t\t\t\tlet ds_input = g_input.stream;\n\n\t\t\t\t// go async so caller has chance to bind event listeners\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\tds_input.pipe(ds_transform);\n\t\t\t\t});\n\t\t\t}\n\t\t\t// string\n\t\t\telse if('string' === typeof g_input.string) {\n\t\t\t\tlet s_input = g_input.string;\n\n\t\t\t\t// go async so caller has chance to bind event listeners\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\tds_transform.end(s_input, 'utf8');\n\t\t\t\t});\n\t\t\t}\n\t\t\t// invalid arg\n\t\t\telse {\n\t\t\t\tthrow new TypeError(`Invalid argument for input parameter: ${'object' === typeof g_input? JSON.stringify(g_input): g_input}`);\n\t\t\t}\n\t\t}\n\n\t\tds_transform._graphy_reader = this;\n\t}\n\n\t_error(s_message) {\n\t\tthis._b_destroyed = true;\n\t\tthrow new Error(s_message);\n\t}\n\n\n\n\tbind(g_config) {\n\t\tlet ds_transform = this.transform;\n\t\tif(g_config.error) ds_transform.on('error', g_config.error);\n\t\tif(g_config.comment) ds_transform.on('comment', g_config.comment);\n\t\tif(g_config.read) ds_transform.once('read', g_config.read);\n\t\tif(g_config.progress) ds_transform.on('progress', g_config.progress);\n\t\tif(g_config.eof) ds_transform.once('eof', g_config.eof);\n\t\tif(g_config.end) ds_transform.once('end', g_config.end);\n\t\tif(g_config.finish) ds_transform.once('finish', g_config.finish);\n\t\tif(g_config.data) ds_transform.on('data', g_config.data);\n\t}\n\n\t// begin parsing, keep applying until no more stack bail-outs\n\tparse() {\n\t\tlet f_sync = this._f_state();\n\t\twhile('function' === typeof f_sync) {\n\t\t\tf_sync = f_sync.apply(this);\n\t\t}\n\t}\n\n\tstatement() {\n\t\tlet s = this.s;\n\t\tlet n = this.n;\n\t\tlet i = this.i;\n\t\tlet f_data_quad = this._f_data_quad;\n\t\tlet create_named_node = this.create_named_node;\n\t\tlet create_named_node_escapeless = this.create_named_node_escapeless;\n\t\tlet create_languaged_literal = this.create_languaged_literal;\n\t\tlet create_blank_node = this.create_blank_node;\n\t\tlet simpleLiteral = this._dc_factory.simpleLiteral;\n\t\tlet datatypedLiteral = this._dc_factory.datatypedLiteral;\n\t\tlet kt_default_graph = this._kt_default_graph;\n\n\t\t// match triples/quads\n\t\tfor(;;) {\n\t\t\t// prepare sticky regex index\n\t\t\tR_QUAD_ESCAPELESS_SP.lastIndex = i;\n\t\t\t// execute regex\n\t\t\tlet m_statement_e_sp = R_QUAD_ESCAPELESS_SP.exec(s);\n\n\t\t\t// regex was a match\n\t\t\tif(m_statement_e_sp) {\n\t\t\t\t// advance index\n\t\t\t\ti = R_QUAD_ESCAPELESS_SP.lastIndex;\n\n\t\t\t\t// prep object term\n\t\t\t\tlet kt_object;\n\t\t\t\t// where to find the graph component\n\t\t\t\tlet b_graph_late = false;\n\n\t\t\t\t// object term type is named node\n\t\t\t\tif(m_statement_e_sp[4]) {\n\t\t\t\t\tlet p_object = m_statement_e_sp[4].slice(1);\n\t\t\t\t\tkt_object = create_named_node_escapeless(p_object);\n\t\t\t\t}\n\t\t\t\t// object term type is blank node\n\t\t\t\telse if(m_statement_e_sp[5]) {\n\t\t\t\t\tkt_object = create_blank_node(m_statement_e_sp[5]);\n\t\t\t\t}\n\t\t\t\t// object term type is literal\n\t\t\t\telse {\n\t\t\t\t\t// graph is in late capture group\n\t\t\t\t\tb_graph_late = true;\n\n\t\t\t\t\t// contents\n\t\t\t\t\tlet s_contents = m_statement_e_sp[9];\n\t\t\t\t\t// string terminator\n\t\t\t\t\tif(m_statement_e_sp[10]) {\n\t\t\t\t\t\t// datatype is present\n\t\t\t\t\t\tif(m_statement_e_sp[11]) {\n\t\t\t\t\t\t\t// create datatype term\n\t\t\t\t\t\t\tlet kt_datatype = this.create_named_node_escapeless(m_statement_e_sp[11]);\n\t\t\t\t\t\t\t// create object term\n\t\t\t\t\t\t\tkt_object = datatypedLiteral(s_contents, kt_datatype);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// language tag is present\n\t\t\t\t\t\telse if(m_statement_e_sp[12]) {\n\t\t\t\t\t\t\t// normalize language\n\t\t\t\t\t\t\tlet s_language = m_statement_e_sp[12].toLowerCase();\n\t\t\t\t\t\t\t// create object term\n\t\t\t\t\t\t\tkt_object = create_languaged_literal(s_contents, s_language);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// simple literal\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tkt_object = simpleLiteral(s_contents);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// no string terminator\n\t\t\t\t\telse {\n\t\t\t\t\t\t// save contents\n\t\t\t\t\t\tthis._s_literal = s_contents;\n\t\t\t\t\t\t// update index\n\t\t\t\t\t\tthis.i = i;\n\t\t\t\t\t\t// save subject\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet s_subject = m_statement_e_sp[1];\n\t\t\t\t\t\t\t// named node\n\t\t\t\t\t\t\tif(s_subject || 'string' === typeof s_subject) {\n\t\t\t\t\t\t\t\tthis._kt_subject = create_named_node_escapeless(s_subject);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// blank node\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis._kt_subject = create_blank_node(m_statement_e_sp[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// save predicate\n\t\t\t\t\t\tthis._kt_predicate = create_named_node_escapeless(m_statement_e_sp[3]);\n\t\t\t\t\t\t// parse contents\n\t\t\t\t\t\tlet z_bail = this.strlit_contents();\n\t\t\t\t\t\t// bail out of stack\n\t\t\t\t\t\tif(z_bail && this.statement !== z_bail) {\n\t\t\t\t\t\t\treturn z_bail;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// statement completed\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// clean\n\t\t\t\t\t\t\tlet r_clean = this._r_clean;\n\t\t\t\t\t\t\tr_clean.lastIndex = this.i;\n\t\t\t\t\t\t\tlet m_clean = r_clean.exec(s);\n\t\t\t\t\t\t\tif(this.emit_comments) {\n\t\t\t\t\t\t\t\tthis.emit_comments(m_clean[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// update local index and prepare to match next statement\n\t\t\t\t\t\t\ti = r_clean.lastIndex;\n\t\t\t\t\t\t\t// resume\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet kt_graph = kt_default_graph;\n\n\t\t\t\t// graph after literal\n\t\t\t\tif(b_graph_late) {\n\t\t\t\t\t// ref capture group\n\t\t\t\t\tlet s_graph = m_statement_e_sp[13];\n\n\t\t\t\t\t// named node\n\t\t\t\t\tif(s_graph || 'string' === typeof s_graph) {\n\t\t\t\t\t\tkt_graph = create_named_node_escapeless(s_graph);\n\t\t\t\t\t}\n\t\t\t\t\t// blank node\n\t\t\t\t\telse if(m_statement_e_sp[14]) {\n\t\t\t\t\t\tkt_graph = create_blank_node(m_statement_e_sp[14]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// graph after node\n\t\t\t\telse {\n\t\t\t\t\t// ref capture group\n\t\t\t\t\tlet s_graph = m_statement_e_sp[6];\n\n\t\t\t\t\t// named node\n\t\t\t\t\tif(s_graph || 'string' === typeof s_graph) {\n\t\t\t\t\t\tkt_graph = create_named_node_escapeless(s_graph);\n\t\t\t\t\t}\n\t\t\t\t\t// blank node\n\t\t\t\t\telse if(m_statement_e_sp[7]) {\n\t\t\t\t\t\tkt_graph = create_blank_node(m_statement_e_sp[7]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet kt_subject;\n\t\t\t\t{\n\t\t\t\t\tlet s_subject = m_statement_e_sp[1];\n\t\t\t\t\t// named node\n\t\t\t\t\tif(s_subject || 'string' === typeof s_subject) {\n\t\t\t\t\t\tkt_subject = create_named_node_escapeless(s_subject);\n\t\t\t\t\t}\n\t\t\t\t\t// blank node\n\t\t\t\t\telse {\n\t\t\t\t\t\tkt_subject = create_blank_node(m_statement_e_sp[2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet s_predicate = m_statement_e_sp[3];\n\t\t\t\t// emit data event\n\t\t\t\tf_data_quad(\n\t\t\t\t\tkt_subject,\n\t\t\t\t\tcreate_named_node_escapeless(s_predicate),\n\t\t\t\t\tkt_object,\n\t\t\t\t\tkt_graph,\n\t\t\t\t);\n\t\t\t\t// comments\n\t\t\t\tif(this.emit_comments) {\n\t\t\t\t\tthis.emit_comments(m_statement_e_sp[8] || m_statement_e_sp[15]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// prepare sticky regex index\n\t\t\t\tR_QUAD.lastIndex = i;\n\t\t\t\t// execute regex\n\t\t\t\tlet m_statement = R_QUAD.exec(s);\n\n\t\t\t\t// regex was a match\n\t\t\t\tif(m_statement) {\n\t\t\t\t\t// advance index\n\t\t\t\t\ti = R_QUAD.lastIndex;\n\n\t\t\t\t\t// prep object term\n\t\t\t\t\tlet kt_object;\n\t\t\t\t\t// where to find the graph component\n\t\t\t\t\tlet b_graph_late = false;\n\n\t\t\t\t\t// object term type is named node\n\t\t\t\t\tif(m_statement[4]) {\n\t\t\t\t\t\tlet p_object = m_statement[4].slice(1);\n\t\t\t\t\t\tkt_object = create_named_node(RT_HAS_ESCAPES.test(p_object)? p_object.replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY): p_object);\n\t\t\t\t\t}\n\t\t\t\t\t// object term type is blank node\n\t\t\t\t\telse if(m_statement[5]) {\n\t\t\t\t\t\tkt_object = create_blank_node(RT_HAS_ESCAPES.test(m_statement[5])? m_statement[5].replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY): m_statement[5]);\n\t\t\t\t\t}\n\t\t\t\t\t// object term type is literal\n\t\t\t\t\telse {\n\t\t\t\t\t\t// graph is in late capture group\n\t\t\t\t\t\tb_graph_late = true;\n\n\t\t\t\t\t\t// contents\n\t\t\t\t\t\tlet s_contents = m_statement[9];\n\t\t\t\t\t\t// string terminator\n\t\t\t\t\t\tif(m_statement[10]) {\n\t\t\t\t\t\t\t// unescape contents\n\t\t\t\t\t\t\ts_contents = unescape_literal_short_hard(s_contents);\n\n\t\t\t\t\t\t\t// datatype is present\n\t\t\t\t\t\t\tif(m_statement[11]) {\n\t\t\t\t\t\t\t\t// create datatype term\n\t\t\t\t\t\t\t\tlet kt_datatype = this.create_named_node(m_statement[11]);\n\t\t\t\t\t\t\t\t// create object term\n\t\t\t\t\t\t\t\tkt_object = datatypedLiteral(s_contents, kt_datatype);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// language tag is present\n\t\t\t\t\t\t\telse if(m_statement[12]) {\n\t\t\t\t\t\t\t\t// normalize language\n\t\t\t\t\t\t\t\tlet s_language = m_statement[12].toLowerCase();\n\t\t\t\t\t\t\t\t// create object term\n\t\t\t\t\t\t\t\tkt_object = create_languaged_literal(s_contents, s_language);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// simple literal\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tkt_object = simpleLiteral(s_contents);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// no string terminator\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// save contents\n\t\t\t\t\t\t\tthis._s_literal = s_contents;\n\t\t\t\t\t\t\t// update index\n\t\t\t\t\t\t\tthis.i = i;\n\t\t\t\t\t\t\t// save subject\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet s_subject = m_statement[1];\n\t\t\t\t\t\t\t\t// named node\n\t\t\t\t\t\t\t\tif(s_subject || 'string' === typeof s_subject) {\n\t\t\t\t\t\t\t\t\tthis._kt_subject = create_named_node(RT_HAS_ESCAPES.test(s_subject)? s_subject.replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY): s_subject);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// blank node\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tthis._kt_subject = create_blank_node(m_statement[2]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// save predicate\n\t\t\t\t\t\t\tthis._kt_predicate = create_named_node(RT_HAS_ESCAPES.test(m_statement[3])? m_statement[3].replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY): m_statement[3]);\n\t\t\t\t\t\t\t// parse contents\n\t\t\t\t\t\t\tlet z_bail = this.strlit_contents();\n\t\t\t\t\t\t\t// bail out of stack\n\t\t\t\t\t\t\tif(z_bail && this.statement !== z_bail) {\n\t\t\t\t\t\t\t\treturn z_bail;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// statement completed\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// clean\n\t\t\t\t\t\t\t\tlet r_clean = this._r_clean;\n\t\t\t\t\t\t\t\tr_clean.lastIndex = this.i;\n\t\t\t\t\t\t\t\tlet m_clean = r_clean.exec(s);\n\t\t\t\t\t\t\t\tif(this.emit_comments) {\n\t\t\t\t\t\t\t\t\tthis.emit_comments(m_clean[1]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// update local index and prepare to match next statement\n\t\t\t\t\t\t\t\ti = r_clean.lastIndex;\n\t\t\t\t\t\t\t\t// resume\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet kt_graph = kt_default_graph;\n\n\t\t\t\t\t// graph after literal\n\t\t\t\t\tif(b_graph_late) {\n\t\t\t\t\t\t// ref capture group\n\t\t\t\t\t\tlet s_graph = m_statement[13];\n\n\t\t\t\t\t\t// named node\n\t\t\t\t\t\tif(s_graph || 'string' === typeof s_graph) {\n\t\t\t\t\t\t\tkt_graph = create_named_node(RT_HAS_ESCAPES.test(s_graph)? s_graph.replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY): s_graph);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// blank node\n\t\t\t\t\t\telse if(m_statement[14]) {\n\t\t\t\t\t\t\tkt_graph = create_blank_node(m_statement[14]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// graph after node\n\t\t\t\t\telse {\n\t\t\t\t\t\t// ref capture group\n\t\t\t\t\t\tlet s_graph = m_statement[6];\n\n\t\t\t\t\t\t// named node\n\t\t\t\t\t\tif(s_graph || 'string' === typeof s_graph) {\n\t\t\t\t\t\t\tkt_graph = create_named_node(RT_HAS_ESCAPES.test(s_graph)? s_graph.replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY): s_graph);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// blank node\n\t\t\t\t\t\telse if(m_statement[7]) {\n\t\t\t\t\t\t\tkt_graph = create_blank_node(m_statement[7]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet kt_subject;\n\t\t\t\t\t{\n\t\t\t\t\t\tlet s_subject = m_statement[1];\n\t\t\t\t\t\t// named node\n\t\t\t\t\t\tif(s_subject || 'string' === typeof s_subject) {\n\t\t\t\t\t\t\tkt_subject = create_named_node(RT_HAS_ESCAPES.test(s_subject)? s_subject.replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY): s_subject);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// blank node\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tkt_subject = create_blank_node(m_statement[2]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet s_predicate = m_statement[3];\n\t\t\t\t\t// emit data event\n\t\t\t\t\tf_data_quad(\n\t\t\t\t\t\tkt_subject,\n\t\t\t\t\t\tcreate_named_node(RT_HAS_ESCAPES.test(s_predicate)? s_predicate.replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY): s_predicate),\n\t\t\t\t\t\tkt_object,\n\t\t\t\t\t\tkt_graph,\n\t\t\t\t\t);\n\t\t\t\t\t// comments\n\t\t\t\t\tif(this.emit_comments) {\n\t\t\t\t\t\tthis.emit_comments(m_statement[8] || m_statement[15]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// prepare sticky regex index\n\t\t\t\t\tR_EOL.lastIndex = i;\n\n\t\t\t\t\tif(R_EOL.exec(s)) {\n\t\t\t\t\t\t// advance index\n\t\t\t\t\t\ti = R_EOL.lastIndex;\n\t\t\t\t\t\tthis._error(`Failed to read statement:\\n\\`${s.substr(i, 80).replace(/\\n/g, '\\u23CE')} [...]\\`\\n ^ starting here`);\n\n\t\t\t\t\t// match counter: 2\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// break loop to retry on next chunk if eos\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} // brace #2\n\t\t\t} // brace #1\n\t\t} // end of while\n\n\t\t// update unparsed data string\n\t\tthis.s = s.substr(i);\n\n\t\t// resume here\n\t\tthis._f_state = this.statement;\n\n\t\t// exit\n\t\treturn 1;\n\t}\n\n\n\tstrlit_contents() {\n\t\tlet {s, n, i} = this;\n\n\t\t// try to find end\n\t\tR_STRLIT_SHORT_DOUBLE_TERM.lastIndex = i;\n\t\tlet m_term = R_STRLIT_SHORT_DOUBLE_TERM.exec(s);\n\n\t\t// end is in this chunk\n\t\tif(m_term) {\n\t\t\t// index of terminator\n\t\t\tlet i_term = m_term.index;\n\n\t\t\t// extract dirty potion\n\t\t\tlet s_dirty = s.slice(i, i_term);\n\n\t\t\t// clean and save\n\t\t\tthis._s_literal += unescape_literal_short_hard(s_dirty);\n\n\t\t\t// advance index beyond terminator\n\t\t\tthis.i = i_term + m_term[0].length;\n\n\t\t\t// resume eating whitespace at start of next chunk\n\t\t\tthis._b_trim_start = true;\n\n\t\t\t// proceed with datatype_or_lang, then bail out of stack or resume parsing\n\t\t\treturn this.datatype_or_langtag() || this.statement;\n\t\t}\n\t\t// end is not in this chunk\n\t\telse {\n\t\t\t// extract whole portion\n\t\t\tlet s_dirty = s.slice(i);\n\n\t\t\t// unescape to clean part\n\t\t\tlet [s_clean, s_incomplete] = unescape_literal_short_soft(s_dirty);\n\n\t\t\t// save\n\t\t\tthis._s_literal += s_clean;\n\n\t\t\t// set unparsed index\n\t\t\tthis.i = i = n - s_incomplete.length;\n\n\t\t\t// do not eat whitespace at start of next chunk\n\t\t\tthis._b_trim_start = false;\n\t\t}\n\n\t\t// not yet eos\n\t\tif(i < this.n) {\n\t\t\t// expected token was not found\n\t\t\tif(0 === i) {\n\t\t\t\t// we've exceeded the maximum token length\n\t\t\t\tif(this.n > this.max_token_length) {\n\t\t\t\t\treturn this.parse_error('strlit_contents');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// resume here\n\t\tthis._f_state = this.strlit_contents;\n\n\t\t// store what is unparsed\n\t\tthis.s = s.slice(i);\n\n\t\t// if we're not parsing a stream, then this is an error\n\t\tif(this.eos) this.eos();\n\t\treturn 1;\n\t}\n\n\n\n\t// parse state for datatype_or_langtag\n\tdatatype_or_langtag() {\n\t\t// destruct chunk, length, and index\n\t\tlet {s, n, i} = this;\n\n\t\t// ref character\n\t\tlet x = s[i];\n\n\t\twhile(i < n) {  // eslint-disable-line no-unmodified-loop-condition\n\t\t\t// datatype\n\t\t\tif('^' === x) {\n\t\t\t\t// enough to speculate datatype\n\t\t\t\tif((i+2) < n) {\n\t\t\t\t\t// correct token\n\t\t\t\t\tif('^' === s[i+1]) {\n\t\t\t\t\t\t// advance index beyond token\n\t\t\t\t\t\tR_IRIREF.lastIndex = i + 2;\n\n\t\t\t\t\t\t// execute regex\n\t\t\t\t\t\tlet m_iriref = R_IRIREF.exec(s);\n\n\t\t\t\t\t\t// regex was a match\n\t\t\t\t\t\tif(m_iriref) {\n\t\t\t\t\t\t\t// advance index\n\t\t\t\t\t\t\tthis.i = R_IRIREF.lastIndex;\n\n\t\t\t\t\t\t\t// prepare iri\n\t\t\t\t\t\t\tlet p_datatype = m_iriref[1].replace(R_UNICODE_ANY, F_REPLACE_UNICODE_ANY);\n\n\t\t\t\t\t\t\t// create datatype term\n\t\t\t\t\t\t\tlet kt_datatype = this.create_named_node(p_datatype);\n\n\t\t\t\t\t\t\t// create object term\n\t\t\t\t\t\t\tthis._kt_object = this._dc_factory.datatypedLiteral(this._s_literal, kt_datatype);\n\n\t\t\t\t\t\t\t// free literal string\n\t\t\t\t\t\t\tthis._s_literal = '';\n\n\t\t\t\t\t\t\t// graph state\n\t\t\t\t\t\t\treturn this.post_object();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// failed to match; try again next chunk\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// invalid\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._error(`Failed to read token after literal:\\n\\`${s.substr(i+1, 80).replace(/\\n/g, '\\u23CE')} [...]\\`\\n ^ starting here`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// not enough to speculate; try again next chunk\n\t\t\t\telse {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// language tag\n\t\t\telse if('@' === x) {\n\t\t\t\t// prepare sticky regex index\n\t\t\t\tR_LANGTAG.lastIndex = i;\n\t\t\t\t// execute regex\n\t\t\t\tlet m_langtag = R_LANGTAG.exec(s);\n\n\t\t\t\t// regex was a match\n\t\t\t\tif(m_langtag) {\n\t\t\t\t\t// advance index\n\t\t\t\t\tthis.i = R_LANGTAG.lastIndex;\n\n\t\t\t\t\t// use direct factory method since regex is validation\n\t\t\t\t\tthis._kt_object = this._dc_factory.languagedLiteral(this._s_literal, m_langtag[1]);\n\n\t\t\t\t\t// free literal string\n\t\t\t\t\tthis._s_literal = '';\n\n\t\t\t\t\t// graph state\n\t\t\t\t\treturn this.post_object();\n\t\t\t\t}\n\t\t\t\t// interrupted by eos; try again next chunk\n\t\t\t\telse {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// graph component\n\t\t\telse if('<' === x || '_' === x) {\n\t\t\t\t// save simple literal\n\t\t\t\tthis._kt_object = this._dc_factory.simpleLiteral(this._s_literal);\n\n\t\t\t\t// free literal string\n\t\t\t\tthis._s_literal = '';\n\n\t\t\t\t// continue parsing graph component\n\t\t\t\treturn this.graph();\n\t\t\t}\n\t\t\t// triple terminator\n\t\t\telse if('.' === x) {\n\t\t\t\t// save simple literal\n\t\t\t\tlet kt_object = this._dc_factory.simpleLiteral(this._s_literal);\n\n\t\t\t\t// free literal string\n\t\t\t\tthis._s_literal = '';\n\n\t\t\t\t// advance index beyond terminator\n\t\t\t\tthis.i = i + 1;\n\n\t\t\t\t// emit data event\n\t\t\t\tthis._f_data_quad(this._kt_subject, this._kt_predicate, kt_object, this._kt_default_graph);\n\n\t\t\t\t// reset state\n\t\t\t\treturn this.statement;\n\n\t\t\t\t// // consume whitespace (and incidentally reset index)\n\t\t\t\t// R_WS.lastIndex = i + 1;\n\t\t\t\t// R_WS.exec(s);\n\t\t\t\t// this.i = R_WS.lastIndex;\n\n\t\t\t\t// // done\n\t\t\t\t// return;\n\t\t\t}\n\t\t\t// other\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// ran out of characters\n\t\t// update index value\n\t\tthis.i = i;\n\n\t\t// not yet eos\n\t\tif(i < this.n) {\n\t\t\t// expected token was not found\n\t\t\tif(0 === i) {\n\t\t\t\t// we've exceeded the maximum token length\n\t\t\t\tif(this.n > this.max_token_length) {\n\t\t\t\t\treturn this.parse_error('datatype_or_langtag');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// resume here\n\t\tthis._f_state = this.datatype_or_langtag;\n\n\t\t// store what is unparsed\n\t\tthis.s = s.slice(i);\n\n\t\t// if we're not parsing a stream, then this is an error\n\t\tif(this.eos) this.eos();\n\t\treturn 1;\n\t}\n\n\tstatement_term() {\n\t\tlet {s, n, i} = this;\n\n\t\t// find full stop\n\t\tlet i_stop = s.indexOf('.', i);\n\n\t\t// found\n\t\tif(i_stop > -1) {\n\t\t\t// consume whitespace again\n\t\t\tthis._b_trim_start = true;\n\n\t\t\t// advance beyond token\n\t\t\tthis.i = i_stop + 1;\n\n\t\t\t// reset state\n\t\t\treturn this.statement;\n\t\t}\n\t\t// anything other than whitespace\n\t\telse if(!/^\\s*$/.test(s.slice(i))) {\n\t\t\tthis.parse_error('statement_term');\n\t\t}\n\n\t\t// do not consume whitespace\n\t\tthis._b_trim_start = false;\n\n\t\t// resume here\n\t\tthis._f_state = this.statement_term;\n\n\t\t// store what is unparsed\n\t\tthis.s = s.slice(i);\n\n\t\t// if we're not parsing a stream, then this is an error\n\t\tif(this.eos) this.eos();\n\t\treturn 1;\n\t}\n\n\tpost_object() {\n\t\tlet {s, n, i} = this;\n\n\t\t// eat horizontal whitespace\n\t\tR_HWS.lastIndex = i;\n\t\tR_HWS.exec(s);\n\t\ti = R_HWS.lastIndex;\n\n\t\t// ran out of characters\n\t\tif(i >= n) {\n\t\t\t// resume here\n\t\t\tthis._f_state = this.post_object;\n\n\t\t\t// store what is unparsed\n\t\t\tthis.s = s.slice(i);\n\n\t\t\t// if we're not parsing a stream, then this is an error\n\t\t\tif(this.eos) this.eos();\n\t\t\treturn 1;\n\t\t}\n\n\t\t// depending on char\n\t\tswitch(s[i]) {\n\t\t\t// statement term\n\t\t\tcase '.': {\n\t\t\t\t// advance index beyond terminator\n\t\t\t\tthis.i = i + 1;\n\n\t\t\t\t// emit data event\n\t\t\t\tthis._f_data_quad(this._kt_subject, this._kt_predicate, this._kt_object, this._kt_default_graph);\n\n\t\t\t\t// reset state\n\t\t\t\treturn this.statement;\n\t\t\t}\n\n\t\t\t// graph\n\t\t\tcase '<':\n\t\t\tcase '_': {\n\t\t\t\t// save index\n\t\t\t\tthis.i = i;\n\n\t\t\t\t// consume graph component\n\t\t\t\treturn this.graph();\n\t\t\t}\n\n\t\t\t// invalid\n\t\t\tdefault: {\n\t\t\t\t// save index\n\t\t\t\tthis.i = i;\n\n\t\t\t\t// emit parsing error\n\t\t\t\tthis.parse_error('post_object');\n\t\t\t}\n\t\t}\n\t}\n\n\tgraph() {\n\t\tlet {s, n, i} = this;\n\n\n\t\t// prepare sticky regex index\n\t\tR_IRIREF.lastIndex = i;\n\t\t// execute regex\n\t\tlet m_iriref = R_IRIREF.exec(s);\n\n\t\t// regex was a match\n\t\tif(m_iriref) {\n\t\t\t// advance index\n\t\t\tthis.i = R_IRIREF.lastIndex;\n\t\t\t// create graph term\n\t\t\tlet kt_graph = this.create_named_node(m_iriref[1]);\n\n\t\t\t// emit data event\n\t\t\tthis._f_data_quad(this._kt_subject, this._kt_predicate, this._kt_object, kt_graph);\n\n\t\t\t// complete with statement_term\n\t\t\treturn this.statement_term();\n\t\t}\n\t\telse {\n\t\t\t// prepare sticky regex index\n\t\t\tR_BLANK_NODE.lastIndex = i;\n\t\t\t// execute regex\n\t\t\tlet m_blank = R_BLANK_NODE.exec(s);\n\n\t\t\t// regex was a match\n\t\t\tif(m_blank) {\n\t\t\t\t// advance index\n\t\t\t\tthis.i = R_BLANK_NODE.lastIndex;\n\t\t\t\t// create graph term\n\t\t\t\tlet kt_graph = this._dc_factory.blankNode(m_blank[1]);\n\n\t\t\t\t// emit data event\n\t\t\t\tthis._f_data_quad(this._kt_subject, this._kt_predicate, this._kt_object, kt_graph);\n\n\t\t\t\t// complete with statement_term\n\t\t\t\treturn this.statement_term();\n\t\t\t}\n\t\t} // brace #1\n\n\n\t\t// resume here\n\t\tthis._f_state = this.graph;\n\n\t\t// store what is unparsed\n\t\tthis.s = s.slice(i);\n\n\t\t// if we're not parsing a stream, then this is an error\n\t\tif(this.eos) this.eos();\n\t\treturn 1;\n\t}\n\n\tparse_error(s_state) {\n\t\treturn this._error(`Failed to read ${s_state}:\\n\\`${this.s.substr(this.i, 80).replace(/\\n/g, '\\u23CE')} [...]\\`\\n ^ starting here`);\n\t}\n\n\tdestroy(e_destroy) {\n\t\tthis._f_data_quad = () => {};\n\n\t\tif(!e_destroy && this._ds_input) {\n\t\t\tthis._ds_input.destroy(e_destroy);\n\t\t}\n\n\t\tthis.transform.demolish(e_destroy);\n\t}\n}\n\n\nmodule.exports = function(...a_args) {\n\tlet g_config = {};\n\n\t// at least one argument\n\tif(a_args.length) {\n\t\tlet z_arg_0 = a_args[0];\n\n\t\t// input given unspecified\n\t\tif(z_arg_0 && z_arg_0.input && 'undefined' === typeof z_arg_0.input.string && !z_arg_0.input.stream) {\n\t\t\tz_arg_0 = z_arg_0.input;\n\t\t}\n\n\t\t// string\n\t\tif('string' === typeof z_arg_0) {\n\t\t\tg_config.input = {string:z_arg_0};\n\t\t}\n\t\t// null\n\t\telse if(null === z_arg_0) {\n\t\t\tg_config.input = null;\n\t\t}\n\t\t// node stream\n\t\telse if('function' === typeof z_arg_0.setEncoding) {\n\t\t\tg_config.input = {stream:z_arg_0};\n\t\t}\n\t\t// whatwg stream\n\t\telse if('function' === typeof z_arg_0.pipeTo) {\n\t\t\tthrow new TypeError(`Sorry, WHATWG streams are currently not supported :(`);\n\t\t// g_config.input = {stream:z_arg_0};\n\t\t}\n\t\t// config struct\n\t\telse if(z_arg_0 && 'object' === typeof z_arg_0 && '[object Object]' === Object.prototype.toString.call(z_arg_0)) {\n\t\t\tg_config = z_arg_0;\n\n\t\t\t// more args; invalid\n\t\t\tif(a_args.length > 1) {\n\t\t\t\tthrow new TypeError(`unexpected argument(s) after config struct: ${a_args.slice(1)}`);\n\t\t\t}\n\t\t}\n\t\t// unknown\n\t\telse {\n\t\t\tthrow new TypeError(`unexpected input type: ${z_arg_0}`);\n\t\t}\n\n\t\t// more args\n\t\tif(a_args.length > 1) {\n\t\t\t// copy onto struct\n\t\t\tObject.assign(g_config, a_args[1]);\n\n\t\t\t// more args\n\t\t\tif(a_args.length > 2) {\n\t\t\t\tthrow new TypeError(`unexpected argument(s) after input and config struct: ${a_args.slice(2)}`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// create reader, return transform stream\n\treturn (new Reader(g_config)).transform;\n};\n"],"sourceRoot":""}